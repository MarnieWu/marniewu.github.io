{"title":"solana-development","uid":"4924e3fdb08216102217b9102664f654","slug":"solana-development","date":"2025-02-28T07:40:06.000Z","updated":"2025-03-09T10:51:23.625Z","comments":true,"path":"api/articles/solana-development.json","keywords":"","cover":[],"content":"<h2 id=\"Solana-合约开发\"><a href=\"#Solana-合约开发\" class=\"headerlink\" title=\"Solana 合约开发\"></a>Solana 合约开发</h2><p>添加 Solana 智能合约依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo add solana-program</span><br></pre></td></tr></table></figure>\n\n<p>修改 <code>Cargo.toml</code>  添加 <code>[lib]</code></p>\n<p><code>[lib]</code> 部分（即 Library）一般是用来配置当前 package 作为 library 被其他库或者可执行的东西引用时的一些配置。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[lib]</span><br><span class=\"line\"><span class=\"keyword\">crate</span>-<span class=\"keyword\">type</span> = [<span class=\"string\">&quot;cdylib&quot;</span>, <span class=\"string\">&quot;lib&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">// 默认 &quot;lib&quot;, 表示当前 package 作为一个 Rust Library 使用</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;cdylib&quot; 表示当前 package 可以作为一个兼容 C语言的 Library 使用</span></span><br></pre></td></tr></table></figure>\n\n<p>当标注了 <code>&quot;cdylib&quot;</code> ，在编译后会生成可以被 non-Rust 程序使用的不同类型文件，如 <code>.so</code> on Linux, <code>.dylib</code> on macOS, or <code>.dll</code> on Windows。</p>\n<h3 id=\"lib-crate-和-binary-crate-有什么区别？\"><a href=\"#lib-crate-和-binary-crate-有什么区别？\" class=\"headerlink\" title=\"lib crate 和 binary crate 有什么区别？\"></a>lib crate 和 binary crate 有什么区别？</h3><p>智能合约（Smart Contract）是一种运行在区块链上的程序，用于自动执行、验证或强制执行合约条款。</p>\n<p>在 Solana 中，Program 程序指的就是 合约，Instruction 指令是一个合约或者程序的基本操作单元，它定义了程序需要执行的具体操作以及所需数据。每个 Instruction 需要包含以下信息：</p>\n<ul>\n<li>程序 ID：调用程序的公钥。</li>\n<li>账户列表：Instruction 操作所需的所有账户。</li>\n<li>指令数据：需要传给程序的特定数据，用于指定程序的具体行为。</li>\n</ul>\n<h3 id=\"Instruction-指令\"><a href=\"#Instruction-指令\" class=\"headerlink\" title=\"Instruction 指令\"></a>Instruction 指令</h3><p>所有合约的交互都从一个函数开始，这个函数被称为 入口函数：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">process_instruction</span>(</span><br><span class=\"line\">    program_id: &amp;Pubkey,</span><br><span class=\"line\">    accounts: &amp;[AccountInfo],</span><br><span class=\"line\">    instruction_data: &amp;[<span class=\"type\">u8</span>],</span><br><span class=\"line\">) <span class=\"punctuation\">-&gt;</span> ProgramResult &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Ok</span>(())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>process_instruction</code> 有 3 个参数：</p>\n<ol>\n<li><code>program_id</code>: 调用程序的公钥 <code>public_key</code></li>\n<li><code>accounts</code>: 合约需要交互的所有账户</li>\n<li><code>instruction_data</code>: 需要传给合约的数据</li>\n</ol>\n<p>返回 <code>Ok(())</code> 表明合约调用全部成功。</p>\n<p>cargo build-sbf 构建合约</p>\n<p>在区块链上，所有的操作或者说交互都需要由 transaction（转账） 实现</p>\n<h2 id=\"Anchor-框架\"><a href=\"#Anchor-框架\" class=\"headerlink\" title=\"Anchor 框架\"></a>Anchor 框架</h2><p>Anchor 框架使用 Rust 宏来减少样板代码量和简化编写 Solana 程序所必须得常用安全检查实现。</p>\n<p>一个 Anchor 程序主要使用到的宏包含：</p>\n<ul>\n<li><code>declare_id</code>: 指定程序的链上地址</li>\n<li><code>#[program]</code>: program 是一个属性宏，指定含有程序指令 instruction 逻辑的模块</li>\n<li><code>#[derive(Accounts)]</code>: Accounts 是一个 trait，它可以应用于某个结构体，让该结构体可以用来表示指令所需的账户列表</li>\n<li><code>#[account]</code>: 也是一个属性宏，应用 account 结构体，为程序创建自定义的账户类型</li>\n</ul>\n<h3 id=\"declare-id-program-ID\"><a href=\"#declare-id-program-ID\" class=\"headerlink\" title=\"declare_id!(program ID)\"></a>declare_id!(program ID)</h3><p>默认，<code>program ID</code>  是 <code>/target/deploy/your_program_name.json</code> 生成的密钥对中的公钥（public key），如果需要修改，直接更新文件后，执行 <code>anchor keys sync</code> 同步密钥。一般如果是 clone repository 的状况，就需要手动修改密钥对 after cloning。</p>\n<h3 id=\"derive-Accounts\"><a href=\"#derive-Accounts\" class=\"headerlink\" title=\"#[derive(Accounts)]\"></a>#[derive(Accounts)]</h3><p>Define instruction accounts 定义指令交互需要的账户及账户类型。Anchor 内部提供了很多种<a href=\"https://docs.rs/anchor-lang/latest/anchor_lang/accounts/account/index.html\">账户类型</a>，可以按需使用，也支持 custom account structures。</p>\n<h4 id=\"Account\"><a href=\"#Account\" class=\"headerlink\" title=\"Account&lt;T&gt;\"></a><code>Account&lt;T&gt;</code></h4><p>自定义账户类型需要使用 <code>Account&lt;T&gt;</code> wrapper 包裹，它是一个包装器，在 Solana 账户工作时会提供额外的功能和安全性。</p>\n<ul>\n<li>Deserialization 反序列化：Account 类型会自动的将账户数据反序列化进你的自定义类型。不需要你手动转化原始账户数据。</li>\n<li>Ownership Check 所有权校验：Anchor 需要确保账户被正确的程序拥有，如果不是预期得程序，会抛出错误。</li>\n<li>Type Safety 类型安全性：通过包裹 Account 类型，确保账户数据符合预期的类型。</li>\n</ul>\n<h3 id=\"account-attribute\"><a href=\"#account-attribute\" class=\"headerlink\" title=\"#[account] attribute\"></a>#[account] attribute</h3><p>区块链上的程序都被称为「智能合约」，智能合约内的所有实体或者说和指令需要操作的对象都定义为「账户」。所以当我们编写合约代码时，需要定义指令交互所需要的账户及其类型，而如果我们需要使用自定义账户类型就需要标注 <code>#[account]</code> 告诉 Anchor 这是一个自定义账户类型，Anchor 自身提供的账户类型某种程度上已经做了很多处理，而自定义账户类型就需要手动提供一些设置信息来通过必要的一些检查和安全性校验。而为了简化这些事情，Anchor 就提供了 <code>#[account]</code> 宏来表示这是一个账户类型，且为其实现了一些方法可供调用，快速设置信息。</p>\n<p>这个宏实现了许多特征，主要的功能包含：</p>\n<ul>\n<li>Assign Program Owner：当创建一个账户类型时（创建账户意味着这不是内置的账户类型），账户的程序 Owner 自动会被设置为 <code>declare_id</code> 接收的 <code>program ID</code>。</li>\n<li>Set Discriminator 设置鉴别器：初始化账户时，会添加到账户数据的前 8 个字节，它是一个唯一的 8 个字节鉴别器，特定于表示账户类型。这个有助于区分账户类型并用于账户验证。</li>\n<li>Data Serialization and Deserialization 数据序列化和反序列化：账户数据会根据账户类型被自动序列化和反序列化。</li>\n</ul>\n<p>关于账户类型，Anchor 提供了很多 <a href=\"https://www.anchor-lang.com/docs/references/account-constraints\">Account Constraints</a>，用于简化自定义账户类型需要提供的一些属性，这些属性是通过账户类型校验和安全性检查必不可少的。</p>\n<h2 id=\"和-web2-的区别\"><a href=\"#和-web2-的区别\" class=\"headerlink\" title=\"和 web2 的区别\"></a>和 web2 的区别</h2><p>web2 中数据都是存储在数据库中，但在 web3 的世界观中，和传统的 <strong>中心化数据库</strong> 不一样，是 <strong>去中心化数据</strong> 存储的一个概念。像在 Solana 这样的区块链平台上，数据是存储在 <strong>账户（Accounts）</strong> 中的，而每个账户都会有一个唯一的地址（public_key），通过公钥就能查询到相关的账户数据。</p>\n<ul>\n<li>程序账户（Program Accounts）：存储程序的代码和状态。</li>\n<li>数据账户（Data Accounts）：存储用户和程序的数据。</li>\n</ul>\n<h3 id=\"PDA（Program-Derived-Address）程序派生地址\"><a href=\"#PDA（Program-Derived-Address）程序派生地址\" class=\"headerlink\" title=\"PDA（Program Derived Address）程序派生地址\"></a>PDA（Program Derived Address）程序派生地址</h3><p><strong>PDA</strong> 是一种由程序生成的地址，它与用户的 <code>public_key</code> 和 某个种子（seed）相关联。通过 PDA，可以确保每个用户关联的数据账户地址是唯一的，并且可以通过用户的 <code>public_key</code> 推导出来。</p>\n<h2 id=\"Test-流程\"><a href=\"#Test-流程\" class=\"headerlink\" title=\"Test 流程\"></a>Test 流程</h2><p>本地起一个测试服务 <code>solana-test-validator</code>，编写完成测试代码，执行 <code>anchor test --skip-local-validator</code>，每次测试完成后会返回一个 signature，该 signature 是此次验证的唯一标识，由它去 <code>explorer.solana.com</code> 上查看相关日志。</p>\n<p><img src=\"/../images/solana-development/image-20250303182212717.png\" alt=\"image-20250303182212717\"></p>\n<p><img src=\"/../images/solana-development/image-20250303182233194.png\" alt=\"image-20250303182233194\"></p>\n<h2 id=\"Client-Program\"><a href=\"#Client-Program\" class=\"headerlink\" title=\"Client Program\"></a>Client Program</h2><p>使用 Solana 钱包适配器整合前端时，你需要设置 <code>AnchorProvider</code> 和 <code>Program</code> 。</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>通过 Anchor 框架实现一个 todo 项目，并部署到 devnet</p>\n<ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n新建 todo</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n查看 todo</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n删除 todo item</p>\n</li>\n</ul>\n","text":"Solana 合约开发添加 Solana 智能合约依赖 1cargo add solana-program 修改 Cargo.toml 添加 [lib] [li...","permalink":"/post/solana-development","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"solana","slug":"solana","count":5,"path":"api/tags/solana.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Solana-%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">Solana 合约开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#lib-crate-%E5%92%8C-binary-crate-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">lib crate 和 binary crate 有什么区别？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Instruction-%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">Instruction 指令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Anchor-%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">Anchor 框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#declare-id-program-ID\"><span class=\"toc-text\">declare_id!(program ID)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#derive-Accounts\"><span class=\"toc-text\">#[derive(Accounts)]</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Account\"><span class=\"toc-text\">Account&lt;T&gt;</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#account-attribute\"><span class=\"toc-text\">#[account] attribute</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%92%8C-web2-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">和 web2 的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PDA%EF%BC%88Program-Derived-Address%EF%BC%89%E7%A8%8B%E5%BA%8F%E6%B4%BE%E7%94%9F%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">PDA（Program Derived Address）程序派生地址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Test-%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Test 流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Client-Program\"><span class=\"toc-text\">Client Program</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"solana-accounts","uid":"80ed7c116b6e6514a2ce292980fb566a","slug":"solana-accounts","date":"2025-03-11T17:14:06.000Z","updated":"2025-03-14T05:09:33.598Z","comments":true,"path":"api/articles/solana-accounts.json","keywords":"","cover":[],"text":"Solana Account ModelAccount Types 数据账户，用来存储数据 系统所有账户 程序派生账户（PDA） 程序账户，用来存储可执行程序 ...","permalink":"/post/solana-accounts","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"solana","slug":"solana","count":5,"path":"api/tags/solana.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"solana-build-up","date":"2025-02-26T03:36:38.000Z","updated":"2025-03-03T09:46:00.605Z","comments":true,"path":"api/articles/solana-build-up.json","keywords":"","cover":[],"text":"区块链是什么？ 一个区块链代表“一个分布式的数据库，它储存了一个连续可增长有序记录列表，称之为块”。这些块通过加密学（cryptography）被链接在一起。每...","permalink":"/post/solana-build-up","photos":[],"count_time":{"symbolsCount":616,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"solana","slug":"solana","count":5,"path":"api/tags/solana.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}