{"title":"泛型 Generics","uid":"ab26d33d9183b3dac0ad2f16b85bf6b4","slug":"generics","date":"2024-12-02T13:12:41.000Z","updated":"2025-01-13T14:29:48.774Z","comments":true,"path":"api/articles/generics.json","keywords":"","cover":[],"content":"<h2 id=\"函数中使用泛型\"><a href=\"#函数中使用泛型\" class=\"headerlink\" title=\"函数中使用泛型\"></a>函数中使用泛型</h2><p>泛型是实现让一个功能函数支持不同类型的手段，我们称之为多态。在不支持泛型时，我们可能会写出如下代码：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_i32</span>(a: <span class=\"type\">i32</span>, b: <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_f64</span>(a: <span class=\"type\">f64</span>, b: <span class=\"type\">f64</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">f64</span> &#123;</span><br><span class=\"line\">    a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add_i8</span>(a: <span class=\"type\">i8</span>, b: <span class=\"type\">i8</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i8</span> &#123;</span><br><span class=\"line\">    a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面是多个类型的 <code>add</code> 函数，因为类型的限制，我们需要为每种类型单独写一个函数。有了泛型之后，可以省去这样冗余的代码，泛型的声明格式：</p>\n<p>使用泛型参数，有一个先决条件，必需在使用前对其进行声明。</p>\n<p>使用前声明的意义是：<strong>表示我这个函数拥有多少泛型参数</strong>，如</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>&lt;T&gt; <span class=\"comment\">// 表示当前 add 函数拥有一个泛型参数 T</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">foo</span>&lt;T, R&gt; <span class=\"comment\">// 表示当前 foo 函数拥有两个泛型参数 T，R</span></span><br></pre></td></tr></table></figure>\n\n<p>延用 add 函数，我们完善泛型声明后如下：</p>\n<p><img src=\"/../images/generics/image-20241203211158137.png\" alt=\"image-20241203211158137\"></p>\n<p>我们得到了一个报错，<code>cannot add T to T</code> 因为泛型参数 T 可以是任何类型，但并不是所有类型都可以做加法这个行为，所以我们还需要对泛型参数 T 进行特征（Trait）限制，以表示这个类型是可以进行相加的。</p>\n<p>我们输入 add 可以看到相关的特征提示，add 特征也是支持泛型的，按照提示的示例，我们修改函数声明。</p>\n<p><img src=\"/../images/generics/image-20241203212451436.png\" alt=\"image-20241203212451436\"></p>\n<p><code>Add</code> 是 <code>use std::ops::Add</code> 引入的，<code>Add&lt;Output = T&gt;</code> 我们把泛型参数 T 传入 Trait <code>Add</code> 的泛型声明中，整个泛型的声明就完成了。</p>\n<p><img src=\"/../images/generics/image-20241203212924566.png\" alt=\"image-20241203212924566\"></p>\n<p>下面我们再尝试写一个复杂点的例子，实现一个输出数组中最大值的函数。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 声明泛型参数 T</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. list 为类型为 T 的数组，用指针类型让数组参数在编译时期有一个确定的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. 返回值为 T类型值 的引用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">largest</span>&lt;T: std::cmp::<span class=\"built_in\">PartialOrd</span>&gt;(list: &amp;[T]) <span class=\"punctuation\">-&gt;</span> &amp;T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认最大值为数组第一个元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">max</span> = &amp;list[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 遍历后续数组，逐个比较，出现更大的值则替换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..list.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里需要注意，需要限制泛型参数 T &lt;T: std::cmp::PartialOrd&gt;，要拥有比较大小的特征</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> max &lt; &amp;list[i] &#123;</span><br><span class=\"line\">            max = &amp;list[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    max</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">number_list</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">max</span> = <span class=\"title function_ invoke__\">largest</span>(&amp;number_list);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;largest number is &#123;&#125;&quot;</span>, max);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行后结果如下：</p>\n<p><img src=\"/../images/generics/image-20241203223430429.png\" alt=\"image-20241203223430429\"></p>\n<h2 id=\"结构体中使用泛型\"><a href=\"#结构体中使用泛型\" class=\"headerlink\" title=\"结构体中使用泛型\"></a>结构体中使用泛型</h2><p>基于上面泛型的理解，我们直接看声明：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  x: T,</span><br><span class=\"line\">  y: T,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上述类型声明表示，结构体 Point 的 fields 都是同一个类型的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">p1</span> = Point &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;  <span class=\"comment\">// Point&lt;i32&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">p2</span> = Point &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;  <span class=\"comment\">// Point&lt;f64&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么当我们需要 x, y 不同类型时，我们可以声明第 2 个泛型参数 U，如下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">  x: T,</span><br><span class=\"line\">  y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">p1</span> = Point &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2</span> &#125;;  <span class=\"comment\">// Point&lt;i32&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">p2</span> = Point &#123; x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span> &#125;;  <span class=\"comment\">// Point&lt;f64&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 这样既可以支持相同类型的情况，也可以支持不同类型的情况</span></span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">p3</span> = Point &#123; x: <span class=\"number\">1</span>, y: <span class=\"number\">2.0</span> &#125;; <span class=\"comment\">// Point&lt;i32, f64&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举中使用泛型\"><a href=\"#枚举中使用泛型\" class=\"headerlink\" title=\"枚举中使用泛型\"></a>枚举中使用泛型</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Option</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Some</span>(T),</span><br><span class=\"line\">    <span class=\"literal\">None</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Result</span>&lt;T, E&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Ok</span>(T),</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">Err</span>(E),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法中使用泛型\"><a href=\"#方法中使用泛型\" class=\"headerlink\" title=\"方法中使用泛型\"></a>方法中使用泛型</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span>&lt;T, U&gt; &#123;</span><br><span class=\"line\">    x: T,</span><br><span class=\"line\">    y: U,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里 Point&lt;T, U&gt; 被视为一种结构体类型，所以在实现其方法时，</span></span><br><span class=\"line\"><span class=\"comment\">// 也需要通过 impl&lt;T, U&gt; 提前声明泛型参数列表</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">x</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;T &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们再加入一个复杂点的方法 mixup，功能是传入另一个 Point，然后输出它们交叉后的新 Point。交叉指的是，取原 Point 的 x 和传入 Point 的 y，组成一个新的 Point。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T, U&gt; Point&lt;T, U&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">x</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;T &#123;</span><br><span class=\"line\">        &amp;<span class=\"keyword\">self</span>.x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// mixup 方法入参需要泛型参数 T2, U2</span></span><br><span class=\"line\">   <span class=\"comment\">// 所以需要提前声明泛型参数列表 mixup&lt;T2, U2&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">// 返回值类型为交叉后的 Point&lt;T, U2&gt; 结构体类型</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">mixup</span>&lt;T2, U2&gt;(<span class=\"keyword\">self</span>, other: Point&lt;T2, U2&gt;) <span class=\"punctuation\">-&gt;</span> Point&lt;T, U2&gt; &#123;</span><br><span class=\"line\">        Point &#123;</span><br><span class=\"line\">            x: <span class=\"keyword\">self</span>.x,</span><br><span class=\"line\">            y: other.y,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里 mixup 并不需要手动传入类型，会根据入参 Point&lt;T2, U2&gt; 类型自动做类型推断</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">p4</span> = p1.<span class=\"title function_ invoke__\">mixup</span>(Point &#123; x: <span class=\"number\">9.0</span>, y: <span class=\"string\">&quot;Hello&quot;</span> &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;p4.x = &#123;&#125;, p4.y = &#123;&#125;&quot;</span>, p4.x, p4.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<p><img src=\"/../images/generics/image-20241204005147126.png\" alt=\"image-20241204005147126\"></p>\n<h2 id=\"const-泛型\"><a href=\"#const-泛型\" class=\"headerlink\" title=\"const 泛型\"></a>const 泛型</h2><p>意思是 <strong>常量的泛型</strong>，在诸如当我们只希望控制参数类型为一个整数 i32 数组，但数组长度不需要固定的情况可以使用，看具体例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// usize 表示索引类型</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">display_array</span>&lt;<span class=\"keyword\">const</span> N: <span class=\"type\">usize</span>&gt;(list: &amp;[<span class=\"type\">i32</span>; N]) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;:?&#125;&quot;</span>, list);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a1</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">display_array</span>(&amp;a1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a2</span> = [<span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">display_array</span>(&amp;a2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<p><img src=\"/../images/generics/image-20241204011012376.png\" alt=\"image-20241204011012376\"></p>\n<h2 id=\"泛型代码的性能\"><a href=\"#泛型代码的性能\" class=\"headerlink\" title=\"泛型代码的性能\"></a>泛型代码的性能</h2><p>使用泛型给开发者带来了很多便利，在开发效率上无疑是提效的。而泛型代码虽然输入是一种模式，但是经由 Rust 编译器，实际会被翻译成 n 种，所有可支持的情况都会有一份代码，这个翻译的过程被称为 <strong>单态化</strong>，即声明时是 <strong>多态的</strong>，编译后即变为 <strong>单态</strong>。同时也就意味着，在运行时其实是不会因为泛型带来任何增加的开销的，因为编译期间都生成好了，对应的调用代码调用的也就是那一份翻译后的代码。所有的开销都是在编译期间产生的（编译时间及编译后文件大小会有所增加），运行期间无损，仍然保持高效。</p>\n","text":"函数中使用泛型泛型是实现让一个功能函数支持不同类型的手段，我们称之为多态。在不支持泛型时，我们可能会写出如下代码： 1234567891011fn add_i3...","permalink":"/post/generics","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">函数中使用泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">结构体中使用泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%9A%E4%B8%BE%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">枚举中使用泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">方法中使用泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#const-%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">const 泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">泛型代码的性能</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"生命周期 Lifetime","uid":"be46c1c387f4b8a2a5d0ca8494de6c20","slug":"lifetime","date":"2024-12-04T10:16:46.000Z","updated":"2025-01-13T14:29:51.129Z","comments":true,"path":"api/articles/lifetime.json","keywords":"","cover":[],"text":"作用生命周期即指一个变量的有效作用范围，它和 Scope 的概念听起来会有点类似。Scope（作用域）规定了变量能被访问的范围，超出了定义作用域的地方是不能访问...","permalink":"/post/lifetime","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"First Project","uid":"3b2621a700dd1210cc1c1a2ba961dd42","slug":"first-project","date":"2024-11-01T08:06:44.000Z","updated":"2025-01-13T14:29:45.597Z","comments":true,"path":"api/articles/first-project.json","keywords":"","cover":null,"text":"Getting Started安装 anchor —— Solana 智能合约框架 1.用 cargo 安装 avm ，Anchor 版本管理器 1cargo ...","permalink":"/post/first-project","photos":[],"count_time":{"symbolsCount":335,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}