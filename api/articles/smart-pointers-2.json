{"title":"智能指针2 Smart Pointers 2","uid":"9fb78f735ce3a3f25bf1795a347b0649","slug":"smart-pointers-2","date":"2024-12-05T03:36:40.000Z","updated":"2025-01-13T14:30:04.334Z","comments":true,"path":"api/articles/smart-pointers-2.json","keywords":"","cover":[],"content":"<h2 id=\"Rc-智能指针\"><a href=\"#Rc-智能指针\" class=\"headerlink\" title=\"Rc 智能指针\"></a>Rc 智能指针</h2><p>Rust 所有权机制要求一个值只能有一个所有者，如果出现需要共享数据的情况，也就是说一个数据资源拥有多个所有者，或者说一个资源需要被多个对象引用，Rust 设计了 <code>Rc</code> 智能指针来做相应实现。</p>\n<h3 id=\"Rc\"><a href=\"#Rc\" class=\"headerlink\" title=\"Rc&lt;T&gt;\"></a><code>Rc&lt;T&gt;</code></h3><p><code>Rc</code> 是引用计数（Reference counting）的意思，顾名思义就是记录一个数据资源被引用的次数，以此来确定该数据是否正在被使用。当引用次数归零后，就代表该数据不再被任何使用，因此可以被清理释放。在离开某个作用域时，如引用对象被 <code>drop</code> 了那引用次数也会对应减去。</p>\n<h3 id=\"Rc-new\"><a href=\"#Rc-new\" class=\"headerlink\" title=\"Rc::new\"></a><code>Rc::new</code></h3><p>我们使用 <code>Rc::new(data)</code> 创建一个新的 <code>Rc&lt;T&gt;</code> 智能指针，并赋值给某个变量。</p>\n<h3 id=\"Rc-clone\"><a href=\"#Rc-clone\" class=\"headerlink\" title=\"Rc::clone\"></a><code>Rc::clone</code></h3><p>我们使用 <code>Rc::clone(Rc&lt;T&gt;)</code> 创建出一个新的 <code>Rc&lt;T&gt;</code> 智能指针，指向堆内存上那个被共享的 <code>Rc&lt;T&gt;</code> 智能指针。使用 <code>clone</code> 可以在不转移所有权的条件下得到 <code>owned value</code>，而不是某个值的引用。</p>\n<h4 id=\"Owned-Value\"><a href=\"#Owned-Value\" class=\"headerlink\" title=\"Owned Value\"></a>Owned Value</h4><p><code>let x = 5</code> 我们把 <code>x</code> 称为 variable 变量，<code>5</code> 称为 owned value 即 数据值，此时 变量 x 拥有 数据 5 的所有权。</p>\n<h3 id=\"Rc-strong-count\"><a href=\"#Rc-strong-count\" class=\"headerlink\" title=\"Rc::strong_count\"></a><code>Rc::strong_count</code></h3><p>新建的 <code>Rc&lt;T&gt;</code> 智能指针初始引用计数为1，每被 <code>clone</code> 一次就会相应 +1，调用 <code>Rc::strong(Rc&lt;T&gt;)</code> 会返回传入的 <code>Rc&lt;T&gt;</code> 智能指针当前被引用的次数。</p>\n<h2 id=\"Strong-Reference-强引用\"><a href=\"#Strong-Reference-强引用\" class=\"headerlink\" title=\"Strong Reference 强引用\"></a>Strong Reference 强引用</h2><p><code>Rc</code> 是 strong reference 强引用，强引用指的是会参与引用计数的引用，参与引用计数意味着每被引用一次，该数据的被引用次数就会加一，只要被引用次数不为0，那这块数据对应的资源就不会被释放。</p>\n<p>比如 c 是一个 <code>Rc</code> 变量，它被 a 和 b 引用着，那只有 a 和 b 的引用都被 drop 了之后，c 对应的内部数据资源才会被清理。这里就会出现一个问题，因为强引用会参与引用计数，它会直接影响到内存释放的逻辑，当产生循环引用时，比如 a 引用 b，c 引用 d，b 和 d 之间存在互相引用，本来 a 离开作用域后应该将 b 释放的，但是因为 d 还有对 b 的引用所以这块资源并不能释放，同样的 c 离开作用域后应该将 d 释放的，但 d 还存在被 b 引用着也无法被释放，这就会产生内存泄漏问题。为了避免内存泄漏，当我们遇到循环引用的场景时我们需要用 weak reference 弱引用来替代，下面说明一下相关用法。</p>\n<h2 id=\"Weak-Reference-弱引用\"><a href=\"#Weak-Reference-弱引用\" class=\"headerlink\" title=\"Weak Reference 弱引用\"></a>Weak Reference 弱引用</h2><h3 id=\"Rc-downgrade\"><a href=\"#Rc-downgrade\" class=\"headerlink\" title=\"Rc::downgrade\"></a><code>Rc::downgrade</code></h3><p>使用 <code>Rc::downgrade(&amp;Rc&lt;T&gt;)</code> 得到一个 <code>Rc</code> 引用的弱引用，弱引用不参与引用计数，它只是 <code>Rc</code> 在处理循环引用上的一个解决方案。而也因为不参与引用计数，所以无法保证被引用的对象一定是存在的，当需要访问它对应的数据时，需要使用 <code>xx.upgrade()</code> 将其转换为强引用类型，且该强引用被引用的对象还存在时，才可以访问。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">t</span> = Rc::<span class=\"title function_ invoke__\">new</span>(<span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Hello&quot;</span>));</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">weak_t</span> = Rc::<span class=\"title function_ invoke__\">downgrade</span>(&amp;t);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// upgrade 得到强引用的对象</span></span><br><span class=\"line\"><span class=\"keyword\">match</span> weak_t.<span class=\"title function_ invoke__\">upgrade</span>() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 若强引用对象还存在</span></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">Some</span>(t) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, t);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 强引用对象不存在</span></span><br><span class=\"line\">  _ =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"共享资源之后还安全么？\"><a href=\"#共享资源之后还安全么？\" class=\"headerlink\" title=\"共享资源之后还安全么？\"></a>共享资源之后还安全么？</h2><p>我们之前学习过，Rust 中设计所有权机制就是为了保证数据资源的使用安全，一个数据资源只有一个所有者，就能规避掉对一个数据<strong>同时</strong>进行读写的状况。</p>\n<p>而也是因为所有权的限制，在很多实际场景中，会让开发者因为所有权转移的规则而头疼，导致代码总是无法编译通过、报错。于是乎，<code>Rc</code> 智能指针的诞生让开发者可以更轻松的实现对一个数据资源的共享且不违背所有权规则的底层原因 —— 数据读写安全，它提供了“创建指向同一块资源的多个指针”的能力，以及一些相关的功能（如：引用计数）。查看 <code>Rc</code> 的内部实现就可以发现，它在创建时其实是把数据装在了一个 <code>Box</code> 智能指针中（让不确定大小的数据类型变成有大小的数据类型，有大小的数据类型指的是为其在栈上申请一块空间，并在栈上拥有一个固定大小的指针指向这块内存），然后又在外面套了一层自己的壳，而在 <code>Rc</code> 智能指针这一层并没有提供<strong>修改内部数据</strong>的方法，所以即使是共享资源，多个对象可以访问一块内存资源，内存中的数据也还是安全的，它只是一个不可变的引用。</p>\n<p>但是往往，需要 share data 的场景 和 修改的场景 都是伴随出现的，我们遇到 共享 + 修改 时需要配合 <code>RefCell</code> 使用。</p>\n<h2 id=\"RefCell\"><a href=\"#RefCell\" class=\"headerlink\" title=\"RefCell\"></a>RefCell</h2><p>一般在共享数据的场景下，如果还需要支持对原数据进行修改，我们就可以使用 <code>RefCell</code>。<code>RefCell</code> 是让你拥有对数据修改能力的结构体，即便这个数据是 <code>immutable</code> 的。它和可变引用的区别是，可变引用依然遵守一个所有者的原则，一个数据的可变引用和不可变引用是不能同时存在的。我们可以看下例子：</p>\n<p><img src=\"/../images/smart-pointers-2/image-20241208191441952.png\" alt=\"image-20241208191441952\"></p>\n<p>如报错所示，因为引用本身还是遵守 ownership 的原则，不可能同时存在两种类型的引用，这是违背数据安全的，在编译时就可以校验出来。说回 <code>RefCell</code> ，我们看到前面引用存在着严格的借用关系，当我们需要借用的地方变多时，就会很难在写代码时就整理出明确的借用关系。此时就可以用 <code>RefCell</code>，它没有编译时的借用关系校验，而是运行时校验，介绍下它的常用内容。</p>\n<h3 id=\"RefCell-new\"><a href=\"#RefCell-new\" class=\"headerlink\" title=\"RefCell::new\"></a><code>RefCell::new</code></h3><p>创建一个新的内部可变的 <code>RefCell</code> 结构体</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::cell::RefCell;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">data</span> = RefCell::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"borrow\"><a href=\"#borrow\" class=\"headerlink\" title=\"borrow()\"></a><code>borrow()</code></h3><p>得到某个 <code>RefCell</code> 的不可变借用</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">r1</span> = data.<span class=\"title function_ invoke__\">borrow</span>();  <span class=\"comment\">// Immutable borrow</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"borrow-mut\"><a href=\"#borrow-mut\" class=\"headerlink\" title=\"borrow_mut()\"></a><code>borrow_mut()</code></h3><p>得到某个 <code>RefCell</code> 的可变借用</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">r2</span> = data.<span class=\"title function_ invoke__\">borrow_mut</span>();  <span class=\"comment\">// Mutable borrow</span></span><br><span class=\"line\">*r2 += <span class=\"number\">1</span>; <span class=\"comment\">// Modify through mutable borrow</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RefCell-的限制\"><a href=\"#RefCell-的限制\" class=\"headerlink\" title=\"RefCell 的限制\"></a><code>RefCell</code> 的限制</h3><p><code>RefCell</code> 也有一个使用规则，在运行时不能同时存在着可变借用和不可变借用。</p>\n<p>如下图的示例，我们可以看到虽然我们创建了可变借用和不可变借用，并有同时存在的时刻，但这并没有触发编译报错：</p>\n<p><img src=\"/../images/smart-pointers-2/image-20241208193816279.png\" alt=\"image-20241208193816279\"></p>\n<p>我们运行代码，可以看到报错信息 “already borrowed”：</p>\n<p><img src=\"/../images/smart-pointers-2/image-20241208194427085.png\" alt=\"image-20241208194427085\"></p>\n<h2 id=\"Interior-Mutability-内部可变性\"><a href=\"#Interior-Mutability-内部可变性\" class=\"headerlink\" title=\"Interior Mutability 内部可变性\"></a>Interior Mutability 内部可变性</h2><p>内部可变性指的是即使变量本身定义的是非可变变量，使用 <code>RefCell</code> 也能改变其内部的数据。</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><img src=\"/../images/smart-pointers-2/image-20241207023528925.png\" alt=\"image-20241207023528925\"></p>\n<p>实现：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::&#123;</span><br><span class=\"line\">    cell::RefCell,</span><br><span class=\"line\">    rc::&#123;Rc, Weak&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">home_work</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">    <span class=\"comment\">// friends 用户列表 Vec&lt;User&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// a、b 存在互相引用 需要定义成 Weak 智能指针 Vec&lt;Weak&lt;User&gt;&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// a、b 的 friends 需要有可变性 Vec&lt;Weak&lt;RefCell&lt;User&gt;&gt;&gt;</span></span><br><span class=\"line\">    friends: RefCell&lt;<span class=\"type\">Vec</span>&lt;Weak&lt;User&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>(name: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> Rc&lt;User&gt; &#123;</span><br><span class=\"line\">        Rc::<span class=\"title function_ invoke__\">new</span>(User &#123;</span><br><span class=\"line\">            name: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(name),</span><br><span class=\"line\">            friends: RefCell::<span class=\"title function_ invoke__\">new</span>(<span class=\"built_in\">vec!</span>[]),</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为我们需要拿到 user 内部的 friends 数据，所以此时需要用 Rc 而不是 Weak，Weak 无法得到内部数据</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add_friend</span>(<span class=\"keyword\">self</span>: &amp;Rc&lt;User&gt;, other: Rc&lt;User&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 需要检查other和self是否已经是朋友，若不是则push进friends列表</span></span><br><span class=\"line\">        <span class=\"comment\">// 如何检查 friends 列表，已知 friends 列表是一个 Weak&lt;User&gt; list</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">weak_other</span> = Rc::<span class=\"title function_ invoke__\">downgrade</span>(&amp;other.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">is_friend</span> = <span class=\"keyword\">self</span></span><br><span class=\"line\">            .friends</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">borrow</span>()</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">iter</span>()</span><br><span class=\"line\">            .<span class=\"title function_ invoke__\">any</span>(|user| weak_other.<span class=\"title function_ invoke__\">ptr_eq</span>(user));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_friend &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; and &#123;&#125; are already friends.&quot;</span>, <span class=\"keyword\">self</span>.name, other.name);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> !is_friend &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; add friend &#123;&#125;&quot;</span>, <span class=\"keyword\">self</span>.name, other.name);</span><br><span class=\"line\">            <span class=\"comment\">// 若不是朋友，更新 friends 列表</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.friends.<span class=\"title function_ invoke__\">borrow_mut</span>().<span class=\"title function_ invoke__\">push</span>(weak_other);</span><br><span class=\"line\">            other.friends.<span class=\"title function_ invoke__\">borrow_mut</span>().<span class=\"title function_ invoke__\">push</span>(Rc::<span class=\"title function_ invoke__\">downgrade</span>(<span class=\"keyword\">self</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">list_friends</span>(<span class=\"keyword\">self</span>: &amp;Rc&lt;User&gt;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">output</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;The friends of &#123;&#125; are &quot;</span>, <span class=\"keyword\">self</span>.name).<span class=\"title function_ invoke__\">as_str</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"variable\">item</span> <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.friends.<span class=\"title function_ invoke__\">borrow</span>().<span class=\"title function_ invoke__\">iter</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">match</span> item.<span class=\"title function_ invoke__\">upgrade</span>() &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">Some</span>(friend) =&gt; output.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"built_in\">format!</span>(<span class=\"string\">&quot;&#123;&#125;,&quot;</span>, friend.name).<span class=\"title function_ invoke__\">as_str</span>()),</span><br><span class=\"line\">                <span class=\"literal\">None</span> =&gt; &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output.<span class=\"title function_ invoke__\">pop</span>();</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, output);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现一个简单的社交网络系统，包含用户和朋友的关系。</span></span><br><span class=\"line\"><span class=\"comment\"> * 用户结构：每个用户拥有一个名字和一个朋友列表</span></span><br><span class=\"line\"><span class=\"comment\"> * 添加朋友：支持在两个用户之间建立朋友关系</span></span><br><span class=\"line\"><span class=\"comment\"> * 展示朋友关系：能够展示每个用户的朋友列表</span></span><br><span class=\"line\"><span class=\"comment\"> * 循环引用：处理用户之间的双向引用，确保不产生循环引用</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">home_work</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = User::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;Milk&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = User::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;Mark&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">c</span> = User::<span class=\"title function_ invoke__\">new</span>(<span class=\"string\">&quot;Film&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    a.<span class=\"title function_ invoke__\">add_friend</span>(b.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    a.<span class=\"title function_ invoke__\">add_friend</span>(c.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    b.<span class=\"title function_ invoke__\">add_friend</span>(a.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    b.<span class=\"title function_ invoke__\">add_friend</span>(c.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    c.<span class=\"title function_ invoke__\">add_friend</span>(a.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    c.<span class=\"title function_ invoke__\">add_friend</span>(b.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\">    a.<span class=\"title function_ invoke__\">list_friends</span>();</span><br><span class=\"line\">    b.<span class=\"title function_ invoke__\">list_friends</span>();</span><br><span class=\"line\">    c.<span class=\"title function_ invoke__\">list_friends</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;a = &#123;:?&#125;&quot;, a);</span></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;b = &#123;:?&#125;&quot;, b);</span></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;c = &#123;:?&#125;&quot;, c);</span></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;a rc = &#123;:?&#125;&quot;, Rc::strong_count(&amp;a));</span></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;b rc = &#123;:?&#125;&quot;, Rc::strong_count(&amp;b));</span></span><br><span class=\"line\">    <span class=\"comment\">// println!(&quot;c rc = &#123;:?&#125;&quot;, Rc::strong_count(&amp;c));</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<p><img src=\"/../images/smart-pointers-2/image-20241227035124617.png\" alt=\"image-20241227035124617\"></p>\n","text":"Rc 智能指针Rust 所有权机制要求一个值只能有一个所有者，如果出现需要共享数据的情况，也就是说一个数据资源拥有多个所有者，或者说一个资源需要被多个对象引用，...","permalink":"/post/smart-pointers-2","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Rc-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Rc 智能指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc\"><span class=\"toc-text\">Rc&lt;T&gt;</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc-new\"><span class=\"toc-text\">Rc::new</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc-clone\"><span class=\"toc-text\">Rc::clone</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Owned-Value\"><span class=\"toc-text\">Owned Value</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc-strong-count\"><span class=\"toc-text\">Rc::strong_count</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Strong-Reference-%E5%BC%BA%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">Strong Reference 强引用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Weak-Reference-%E5%BC%B1%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">Weak Reference 弱引用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rc-downgrade\"><span class=\"toc-text\">Rc::downgrade</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90%E4%B9%8B%E5%90%8E%E8%BF%98%E5%AE%89%E5%85%A8%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">共享资源之后还安全么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RefCell\"><span class=\"toc-text\">RefCell</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RefCell-new\"><span class=\"toc-text\">RefCell::new</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#borrow\"><span class=\"toc-text\">borrow()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#borrow-mut\"><span class=\"toc-text\">borrow_mut()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RefCell-%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">RefCell 的限制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Interior-Mutability-%E5%86%85%E9%83%A8%E5%8F%AF%E5%8F%98%E6%80%A7\"><span class=\"toc-text\">Interior Mutability 内部可变性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"特征 Trait","uid":"bf66738dcbdc4a39018dfff1579fc70a","slug":"trait","date":"2025-01-05T14:56:40.000Z","updated":"2025-01-20T17:13:03.998Z","comments":true,"path":"api/articles/trait.json","keywords":"","cover":[],"text":"孤儿规则impl T for A : 为 A 实现特征 T , 那么 A 或者 T 至少有一个是在当前作用域中定义的。 1234fn main { // ❌ C...","permalink":"/post/trait","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"生命周期 Lifetime","uid":"be46c1c387f4b8a2a5d0ca8494de6c20","slug":"lifetime","date":"2024-12-04T10:16:46.000Z","updated":"2025-01-13T14:29:51.129Z","comments":true,"path":"api/articles/lifetime.json","keywords":"","cover":[],"text":"作用生命周期即指一个变量的有效作用范围，它和 Scope 的概念听起来会有点类似。Scope（作用域）规定了变量能被访问的范围，超出了定义作用域的地方是不能访问...","permalink":"/post/lifetime","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}