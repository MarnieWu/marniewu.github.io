{"title":"特征 Trait","uid":"bf66738dcbdc4a39018dfff1579fc70a","slug":"trait","date":"2025-01-05T14:56:40.000Z","updated":"2025-01-20T17:13:03.998Z","comments":true,"path":"api/articles/trait.json","keywords":"","cover":[],"content":"<h3 id=\"孤儿规则\"><a href=\"#孤儿规则\" class=\"headerlink\" title=\"孤儿规则\"></a>孤儿规则</h3><p><code>impl T for A</code> : 为 <code>A</code> 实现特征 <code>T</code> , 那么 <code>A</code> 或者 <code>T</code> 至少有一个是在当前作用域中定义的。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ❌ Clone 和 String 都是标准库中定义的，而不是当前 crate 中定义的，无法使用 impl 关键字</span></span><br><span class=\"line\">  <span class=\"keyword\">impl</span> <span class=\"title class_\">Clone</span> <span class=\"keyword\">for</span> <span class=\"title class_\">String</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250107215613766.png\" alt=\"image-20250107215613766\"></p>\n<h3 id=\"签名-signature-和重载-override\"><a href=\"#签名-signature-和重载-override\" class=\"headerlink\" title=\"签名 signature 和重载 override\"></a>签名 signature 和重载 override</h3><p>trait 中，可以只定义签名，也可以定义方法的默认行为。在具体实现中定义的方法会重载特征中默认的方法。</p>\n<p>当我们在调用某个方法时，会先找自身结构体中是否有对应实现，若没有则向上🔼找特征中的该方法。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Post 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Post</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">    author: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Weibo 结构体</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Weibo</span> &#123;</span><br><span class=\"line\">    username: <span class=\"type\">String</span>,</span><br><span class=\"line\">    content: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Summary 特征</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> <span class=\"title class_\">Summary</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize_author</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;Read more from &#123;&#125;...&quot;</span>, <span class=\"keyword\">self</span>.<span class=\"title function_ invoke__\">summarize_author</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为 Post 实现 Summary 特征</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Post</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize_author</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.author.<span class=\"title function_ invoke__\">clone</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fn summarize(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     format!(&quot;文章&#123;&#125;，作者是&#123;&#125;&quot;, self.name, self.author)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为 Weibo 实现 Summary 特征</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Weibo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize_author</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;@&#123;&#125;&quot;</span>, <span class=\"keyword\">self</span>.username)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;&#123;&#125;发表了微博&#123;&#125;&quot;</span>, <span class=\"keyword\">self</span>.username, <span class=\"keyword\">self</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">post</span> = Post &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&quot;trait_study&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>(),</span><br><span class=\"line\">        author: <span class=\"string\">&quot;marnie&quot;</span>.<span class=\"title function_ invoke__\">to_string</span>(),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Post 中只有 summarize_author 这一个方法的实现</span></span><br><span class=\"line\">   <span class=\"comment\">// 所以当调用 summarize 方法时会找到其原特征中的对应方法</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, post.<span class=\"title function_ invoke__\">summarize_author</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, post.<span class=\"title function_ invoke__\">summarize</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">weibo</span> = Weibo &#123;</span><br><span class=\"line\">        username: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;marnie&quot;</span>),</span><br><span class=\"line\">        content: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;正在学习 Trait 特征&quot;</span>),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 因为 Weibo 中分别对以下两个方法进行了重写，会覆盖特征中的默认方法</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, weibo.<span class=\"title function_ invoke__\">summarize_author</span>());</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, weibo.<span class=\"title function_ invoke__\">summarize</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250107215318592.png\" alt=\"image-20250107215318592\"></p>\n<h3 id=\"泛型的使用\"><a href=\"#泛型的使用\" class=\"headerlink\" title=\"泛型的使用\"></a>泛型的使用</h3><h4 id=\"在特征中使用泛型\"><a href=\"#在特征中使用泛型\" class=\"headerlink\" title=\"在特征中使用泛型\"></a>在特征中使用泛型</h4><p><strong><code>trait AAA&lt;T&gt;</code> 使用到传入的泛型的地方，必须手动标注类型</strong></p>\n<p>特征接收的泛型是给<strong>特征方法</strong>所使用的，在具体实现了特征的结构体调用方法时，需要手动的标注泛型的实际类型，让编译器知道调用哪个类型实现的方法</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 特征 Convert 用于转换类型</span></span><br><span class=\"line\"><span class=\"keyword\">trait</span> <span class=\"title class_\">Convert</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">convert</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们定义一个结构体来实现 Convert 特征</span></span><br><span class=\"line\"><span class=\"comment\">// 元组结构体（tuple）</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">MyInt</span>(<span class=\"type\">i32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对 MyInt 实现了两种类型的特征</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Convert</span>&lt;<span class=\"type\">i32</span>&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">MyInt</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">convert</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"number\">0</span> <span class=\"keyword\">as</span> <span class=\"type\">i32</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Convert</span>&lt;<span class=\"type\">String</span>&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">MyInt</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">convert</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"number\">0</span>.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">my_int</span> = <span class=\"title function_ invoke__\">MyInt</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 必须手动加上类型标注</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span>: <span class=\"type\">i32</span> = my_int.<span class=\"title function_ invoke__\">convert</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, output);</span><br><span class=\"line\">    <span class=\"comment\">// 必须手动加上类型标注</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">output</span>: <span class=\"type\">String</span> = my_int.<span class=\"title function_ invoke__\">convert</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, output);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"在方法中使用泛型\"><a href=\"#在方法中使用泛型\" class=\"headerlink\" title=\"在方法中使用泛型\"></a>在方法中使用泛型</h4><p><strong><code>impl&lt;T&gt; AAA for BBB ==&gt; impl&lt;T&gt; for BBB</code></strong></p>\n<p>在方法中使用泛型指的是 —— 当我们某个特征方法需要使用泛型，它本质上就是将指定类型传给方法，和特征、和结构体其实无关，使用上和在结构体中使用泛型是一个方式。</p>\n<p>一种更疯狂的用法，该泛型既是方法需要用的也是特征要用的，会是下面定义的样子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">impl</span>&lt;T&gt; Convert&lt;T&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">MyInt</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 trait 中加入了泛型，让我们拥有了针对不同场景进行不同类型实现的能力。但如果我们想控制 —— 特征的实现是可以支持多种类型的，但只能有一种类型的具体实现，这个时候泛型就做不了这样的约束了，Rust 针对需要这种约束的场景提供了一个新的方式 —— 关联类型。</p>\n<h4 id=\"关联类型\"><a href=\"#关联类型\" class=\"headerlink\" title=\"关联类型\"></a>关联类型</h4><p>关联类型是在签名时不固定类型，在实现中指定需关联的类型，且不能有多次指定（即多种实现），编译器会在第一次以后得实现上报错。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- trait Convert&lt;T&gt; &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     fn convert(&amp;self) -&gt; T;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ trait Convert &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     // 这是关联类型 Output</span></span><br><span class=\"line\"><span class=\"addition\">+     type Output;</span></span><br><span class=\"line\"><span class=\"addition\">+     // Self::Output 使用关联类型</span></span><br><span class=\"line\"><span class=\"addition\">+     fn convert(&amp;self) -&gt; Self::Output;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">struct MyInt(i32);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- impl Convert&lt;i32&gt; for MyInt &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     fn convert(&amp;self) -&gt; i32 &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-         self.0 as i32</span></span><br><span class=\"line\"><span class=\"deletion\">-     &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- impl Convert&lt;String&gt; for MyInt &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-     fn convert(&amp;self) -&gt; String &#123;</span></span><br><span class=\"line\"><span class=\"deletion\">-         self.0.to_string()</span></span><br><span class=\"line\"><span class=\"deletion\">-     &#125;</span></span><br><span class=\"line\"><span class=\"deletion\">- &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ impl Convert for MyInt &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+     type Output = i32;</span></span><br><span class=\"line\"><span class=\"addition\">+     fn convert(&amp;self) -&gt; Self::Output &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+         self.0</span></span><br><span class=\"line\"><span class=\"addition\">+     &#125;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果关联了不止一个类型，就会得到下面的报错：</p>\n<p><img src=\"/../images/trait/image-20250108012151958.png\" alt=\"image-20250108012151958\"></p>\n<h4 id=\"Trait-关联类型的默认类型\"><a href=\"#Trait-关联类型的默认类型\" class=\"headerlink\" title=\"Trait 关联类型的默认类型\"></a>Trait 关联类型的默认类型</h4><p><strong><code>A&lt;B = T&gt;</code> T 为 A 关联类型 B 的默认类型</strong></p>\n<p>我们先实现一个简单的 <code>add</code> 函数，功能是将两个参数相加，并返回结果：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> std::ops::Add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作用：将两参数相加，并返回结果</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>&lt;T: Add&lt;Output = T&gt;&gt;(a: T, b: T) <span class=\"punctuation\">-&gt;</span> T &#123;</span><br><span class=\"line\">  a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">add</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250108234128123.png\" alt=\"image-20250108234128123\"></p>\n<p>这里用了一个内部特征 <code>Add</code>，它支持泛型且默认值为 <code>Self</code>，<code>Self</code> 指的是当你没有指定传入类型时它就默认为你<strong>正在调用的实现了 <code>Add</code> 特征的当前类型</strong>。</p>\n<p><img src=\"/../images/trait/image-20250108234357616.png\" alt=\"image-20250108234357616\"></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 举个例子</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  x: <span class=\"type\">i32</span>,</span><br><span class=\"line\">  y: <span class=\"type\">i32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ✨ 并没有指定 Add 的泛型，Self 则为当前类型 Point</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ✨ 关联类型没有默认值，必须手动指定</span></span><br><span class=\"line\">  <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = Point;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">self</span>, rhs: <span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">    Point &#123;</span><br><span class=\"line\">      x: <span class=\"keyword\">self</span>.x + rhs.x,</span><br><span class=\"line\">      y: <span class=\"keyword\">self</span>.y + rhs.y,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">p1</span> = Point &#123; x: <span class=\"number\">10</span>, y: <span class=\"number\">20</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">p2</span> = Point &#123; x: <span class=\"number\">20</span>, y: <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">p3</span> = p1.<span class=\"title function_ invoke__\">add</span>(p2);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250109004948084.png\" alt=\"image-20250109004948084\"></p>\n<p>再回到前面我们手动实现的 <code>add</code> 函数，我们再用不同类型来试验一下泛型：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add 特征在 Meters 上的多态实现</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Add</span>&lt;Kilometers&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Meters</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = Meters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">self</span>, rhs: Kilometers) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;&#123;&#125;km, &#123;&#125;m, &#123;&#125;m&quot;</span>,</span><br><span class=\"line\">            rhs.<span class=\"number\">0</span>,</span><br><span class=\"line\">            rhs.<span class=\"number\">0</span> * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>,</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"number\">0</span> + (rhs.<span class=\"number\">0</span> * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Meters</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span> + (rhs.<span class=\"number\">0</span> * <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add 特征在 Meters 上的多态实现</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Meters</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = Meters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">self</span>, rhs: Meters) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Meters</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span> + rhs.<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add 特征在 Kilometers 上的多态实现</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Add</span>&lt;Meters&gt; <span class=\"keyword\">for</span> <span class=\"title class_\">Kilometers</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = Kilometers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">self</span>, rhs: Meters) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"built_in\">println!</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;&#123;&#125;m, &#123;&#125;km, &#123;&#125;km&quot;</span>,</span><br><span class=\"line\">            rhs.<span class=\"number\">0</span>,</span><br><span class=\"line\">            rhs.<span class=\"number\">0</span> / <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>,</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.<span class=\"number\">0</span> + (rhs.<span class=\"number\">0</span> / <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Kilometers</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span> + rhs.<span class=\"number\">0</span> / <span class=\"number\">1000</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add 特征在 Kilometers 上的多态实现</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Add</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Kilometers</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = Kilometers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(<span class=\"keyword\">self</span>, rhs: <span class=\"keyword\">Self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Kilometers</span>(<span class=\"keyword\">self</span>.<span class=\"number\">0</span> + rhs.<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">m</span> = <span class=\"title function_ invoke__\">Meters</span>(<span class=\"number\">600</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">km</span> = <span class=\"title function_ invoke__\">Kilometers</span>(<span class=\"number\">10</span> <span class=\"keyword\">as</span> <span class=\"type\">f64</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">total_m</span> = m.<span class=\"title function_ invoke__\">clone</span>().<span class=\"title function_ invoke__\">add</span>(km.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">total_km</span> = km.<span class=\"title function_ invoke__\">add</span>(m.<span class=\"title function_ invoke__\">clone</span>());</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;total meters = &#123;:?&#125;m&quot;</span>, total_m.<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;total kilometers = &#123;:?&#125;km&quot;</span>, total_km.<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250109031326233.png\" alt=\"image-20250109031326233\"></p>\n<p>当 Trait 作为参数传递时，如何进行类型声明 —— Trait Bound 特征约束</p>\n<h4 id=\"Trait-Bound-特征约束\"><a href=\"#Trait-Bound-特征约束\" class=\"headerlink\" title=\"Trait Bound 特征约束\"></a>Trait Bound 特征约束</h4><p>假设当前有一个特征 <code>Summary</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> <span class=\"title class_\">Summary</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">String</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TODO：实现 notify 函数，用于实现了 Summary 特征的类型进行通知（调用 .summarize 方法）</span></span><br></pre></td></tr></table></figure>\n\n<p><strong><code>&lt;T: U&gt;</code></strong> 用于约束泛型 T 必须是实现了 U 特性的类型，但该函数只能接受一种泛型的具体类型</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单个参数</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">notify</span>&lt;T: Summary&gt;(item: &amp;T) &#123;</span><br><span class=\"line\">  item.<span class=\"title function_ invoke__\">summarize</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多参数</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">notify</span>&lt;T: Summary&gt;(item1: &amp;T, item2: &amp;T) &#123;</span><br><span class=\"line\">  item.<span class=\"title function_ invoke__\">summarize</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略 Weibo，Post 定义，它们均是实现了 Summary 特征的结构体</span></span><br><span class=\"line\"><span class=\"comment\">// 只能传入一种类型</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">notify</span>(Weibo &#123;&#125;, Weibo &#123;&#125;); <span class=\"comment\">// ✅</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">notify</span>(Weibo &#123;&#125;, Post &#123;&#125;); <span class=\"comment\">// ❌</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong><code>impl T</code></strong> 用于表示实现了 <code>T</code> 特性的类型，比起 <code>&lt;T: U&gt;</code> 更灵活，可以传入不同的实现了同一特征的类型</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">notify</span>(item: &amp;<span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span>) &#123;</span><br><span class=\"line\">  item.<span class=\"title function_ invoke__\">summarize</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回类型同样也能使用</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">foo</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 多参数</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">notify</span>(item1: &amp;<span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span>, item2: &amp;<span class=\"keyword\">impl</span> <span class=\"title class_\">Summary</span>) &#123;</span><br><span class=\"line\">  item.<span class=\"title function_ invoke__\">summarize</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 省略 Weibo，Post 定义，它们均是实现了 Summary 特征的结构体</span></span><br><span class=\"line\"><span class=\"comment\">// 可以传入多个类型</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">notify</span>(Weibo &#123;&#125;, Post &#123;&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"多重约束-impl-A-B-表示同时实现了-特征A-和-特征B-的类型\"><a href=\"#多重约束-impl-A-B-表示同时实现了-特征A-和-特征B-的类型\" class=\"headerlink\" title=\"多重约束 &lt;T: A + B&gt; &#x2F; impl A + B 表示同时实现了 特征A 和 特征B 的类型\"></a><strong>多重约束</strong> <code>&lt;T: A + B&gt;</code> &#x2F; <code>impl A + B</code> 表示同时实现了 特征A 和 特征B 的类型</h5><h5 id=\"where-语法糖\"><a href=\"#where-语法糖\" class=\"headerlink\" title=\"where 语法糖\"></a>where 语法糖</h5><p>当约束复杂时，可以使用 <code>where</code> 语法糖在函数后面写类型约束</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">notify2</span>&lt;T, U&gt;(item1: T, item2: U)</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">  T: Summary + Display,</span><br><span class=\"line\">  U: Summary + Display + <span class=\"built_in\">Debug</span>,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"derive-派生特性\"><a href=\"#derive-派生特性\" class=\"headerlink\" title=\"derive 派生特性\"></a>derive 派生特性</h5><p>当一个类型没有实现某个 trait 但又想使用该特性的方法，可以使用 <strong><code>#[derive(AAA)]</code></strong> 派生特性的语法，会自动实现该特征和继承其方法的默认行为。如果一个结构体派生了某个特征，那么该结构体的每个字段都需要实现了这个特征，不然无法对齐特征，使用其功能。</p>\n<h5 id=\"Copy-Trait-复制特征\"><a href=\"#Copy-Trait-复制特征\" class=\"headerlink\" title=\"Copy Trait 复制特征\"></a>Copy Trait 复制特征</h5><p>这里介绍一个常用特征 <code>Copy</code> ，通常我们使用 <code>let b = a</code>，因为所有权的控制，赋值会将 a 的值的所有权转移给目标变量 b，在赋值语句之后，a 将不能再被使用。</p>\n<p>但如果是实现了 <code>Copy</code> 特征的类型，在赋值操作时会调用 <code>Copy</code> 特征的功能，不会转移所有权，会将值复制一份赋值给目标变量，这样一来等号左边和右边的变量就是两个独立变量，不会互相影响。一般内置基本类型都已经实现了 <code>Copy</code> 特征。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Meters</span>(<span class=\"type\">i32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"title function_ invoke__\">Meters</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = b;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;:?&#125;&quot;</span>, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250110205348808.png\" alt=\"image-20250110205348808\"></p>\n<p>我们使用派生特性加上 <code>Copy</code> 特征，报错就解决了：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#[derive(Debug, Copy)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Meters</span>(<span class=\"type\">i32</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = <span class=\"title function_ invoke__\">Meters</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = b;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;:?&#125;&quot;</span>, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/trait/image-20250110212205046.png\" alt=\"image-20250110212205046\"></p>\n<h4 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h4><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> <span class=\"title class_\">Item</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Apple</span> &#123;</span><br><span class=\"line\">    name: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Weibo</span> &#123;</span><br><span class=\"line\">    author: <span class=\"type\">String</span>,</span><br><span class=\"line\">    content: <span class=\"type\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Item</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Apple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = <span class=\"type\">String</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.name.<span class=\"title function_ invoke__\">to_string</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Item</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Weibo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Output</span> = <span class=\"type\">String</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">summarize</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"keyword\">Self</span>::Output &#123;</span><br><span class=\"line\">        <span class=\"built_in\">format!</span>(<span class=\"string\">&quot;@&#123;&#125;:&#123;&#125;&quot;</span>, <span class=\"keyword\">self</span>.author, <span class=\"keyword\">self</span>.content)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 💙 注意点</span></span><br><span class=\"line\">    items: <span class=\"type\">Vec</span>&lt;<span class=\"type\">Box</span>&lt;<span class=\"keyword\">dyn</span> Item&lt;Output = <span class=\"type\">String</span>&gt;&gt;&gt;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Container</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">iterator</span>(&amp;<span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 💙 注意点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> <span class=\"variable\">item</span> <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>.items.<span class=\"title function_ invoke__\">iter</span>() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, item.<span class=\"title function_ invoke__\">summarize</span>())</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">apple</span> = Apple &#123;</span><br><span class=\"line\">        name: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Marnie&quot;</span>),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">weibo</span> = Weibo &#123;</span><br><span class=\"line\">        author: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Marnie&quot;</span>),</span><br><span class=\"line\">        content: <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;sky...&quot;</span>),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">container</span> = Container &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 💙 注意点</span></span><br><span class=\"line\">        items: <span class=\"built_in\">vec!</span>[<span class=\"type\">Box</span>::<span class=\"title function_ invoke__\">new</span>(apple), <span class=\"type\">Box</span>::<span class=\"title function_ invoke__\">new</span>(weibo)],</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    container.<span class=\"title function_ invoke__\">iterator</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h6 id=\"Trait-Object-用-dyn-关键字\"><a href=\"#Trait-Object-用-dyn-关键字\" class=\"headerlink\" title=\"Trait Object 用 dyn 关键字\"></a>Trait Object 用 <code>dyn</code> 关键字</h6></li>\n<li><h6 id=\"Trait-Object-是动态类型，编译时没有固定大小，需要用智能指针包裹（赋予其一个栈内的固定大小）使用\"><a href=\"#Trait-Object-是动态类型，编译时没有固定大小，需要用智能指针包裹（赋予其一个栈内的固定大小）使用\" class=\"headerlink\" title=\"Trait Object 是动态类型，编译时没有固定大小，需要用智能指针包裹（赋予其一个栈内的固定大小）使用\"></a>Trait Object 是动态类型，编译时没有固定大小，需要用智能指针包裹（赋予其一个栈内的固定大小）使用</h6></li>\n<li><h6 id=\"遍历向量-Vec-使用-xxx-iter\"><a href=\"#遍历向量-Vec-使用-xxx-iter\" class=\"headerlink\" title=\"遍历向量 Vec 使用 xxx.iter()\"></a>遍历向量 <code>Vec</code> 使用 <code>xxx.iter()</code></h6></li>\n<li><h6 id=\"含关联类型的声明方式-XXX\"><a href=\"#含关联类型的声明方式-XXX\" class=\"headerlink\" title=\"含关联类型的声明方式 XXX&lt;Output = T&gt;\"></a>含关联类型的声明方式 <code>XXX&lt;Output = T&gt;</code></h6></li>\n</ul>\n","text":"孤儿规则impl T for A : 为 A 实现特征 T , 那么 A 或者 T 至少有一个是在当前作用域中定义的。 1234fn main { // ❌ C...","permalink":"/post/trait","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%A4%E5%84%BF%E8%A7%84%E5%88%99\"><span class=\"toc-text\">孤儿规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AD%BE%E5%90%8D-signature-%E5%92%8C%E9%87%8D%E8%BD%BD-override\"><span class=\"toc-text\">签名 signature 和重载 override</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">泛型的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%89%B9%E5%BE%81%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">在特征中使用泛型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E6%96%B9%E6%B3%95%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">在方法中使用泛型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">关联类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Trait-%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%BB%98%E8%AE%A4%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Trait 关联类型的默认类型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Trait-Bound-%E7%89%B9%E5%BE%81%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">Trait Bound 特征约束</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E7%BA%A6%E6%9D%9F-impl-A-B-%E8%A1%A8%E7%A4%BA%E5%90%8C%E6%97%B6%E5%AE%9E%E7%8E%B0%E4%BA%86-%E7%89%B9%E5%BE%81A-%E5%92%8C-%E7%89%B9%E5%BE%81B-%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">多重约束 &lt;T: A + B&gt; &#x2F; impl A + B 表示同时实现了 特征A 和 特征B 的类型</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#where-%E8%AF%AD%E6%B3%95%E7%B3%96\"><span class=\"toc-text\">where 语法糖</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#derive-%E6%B4%BE%E7%94%9F%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">derive 派生特性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Copy-Trait-%E5%A4%8D%E5%88%B6%E7%89%B9%E5%BE%81\"><span class=\"toc-text\">Copy Trait 复制特征</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Trait-Object-%E7%94%A8-dyn-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">Trait Object 用 dyn 关键字</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Trait-Object-%E6%98%AF%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%BC%96%E8%AF%91%E6%97%B6%E6%B2%A1%E6%9C%89%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F%EF%BC%8C%E9%9C%80%E8%A6%81%E7%94%A8%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88%E5%8C%85%E8%A3%B9%EF%BC%88%E8%B5%8B%E4%BA%88%E5%85%B6%E4%B8%80%E4%B8%AA%E6%A0%88%E5%86%85%E7%9A%84%E5%9B%BA%E5%AE%9A%E5%A4%A7%E5%B0%8F%EF%BC%89%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Trait Object 是动态类型，编译时没有固定大小，需要用智能指针包裹（赋予其一个栈内的固定大小）使用</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E5%90%91%E9%87%8F-Vec-%E4%BD%BF%E7%94%A8-xxx-iter\"><span class=\"toc-text\">遍历向量 Vec 使用 xxx.iter()</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%90%AB%E5%85%B3%E8%81%94%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F-XXX\"><span class=\"toc-text\">含关联类型的声明方式 XXX&lt;Output &#x3D; T&gt;</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"宏 Marcos","uid":"764bca6314ff5edd2be26b3adc313bc1","slug":"marcos","date":"2025-01-13T14:29:24.000Z","updated":"2025-01-15T18:49:58.785Z","comments":true,"path":"api/articles/marcos.json","keywords":"","cover":[],"text":"Declarative macrosWhat is macro_rules!?macro_rules! 用于定义声明式宏（declarative macros）...","permalink":"/post/marcos","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"智能指针2 Smart Pointers 2","uid":"9fb78f735ce3a3f25bf1795a347b0649","slug":"smart-pointers-2","date":"2024-12-05T03:36:40.000Z","updated":"2025-01-13T14:30:04.334Z","comments":true,"path":"api/articles/smart-pointers-2.json","keywords":"","cover":[],"text":"Rc 智能指针Rust 所有权机制要求一个值只能有一个所有者，如果出现需要共享数据的情况，也就是说一个数据资源拥有多个所有者，或者说一个资源需要被多个对象引用，...","permalink":"/post/smart-pointers-2","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":10,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}