{"title":"生命周期 Lifetime","uid":"be46c1c387f4b8a2a5d0ca8494de6c20","slug":"lifetime","date":"2024-12-04T10:16:46.000Z","updated":"2025-01-13T14:29:51.129Z","comments":true,"path":"api/articles/lifetime.json","keywords":"","cover":[],"content":"<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>生命周期即指一个变量的有效作用范围，它和 Scope 的概念听起来会有点类似。Scope（作用域）规定了变量能被访问的范围，超出了定义作用域的地方是不能访问作用域内定义的变量的。而 Lifetime（生命周期）是针对引用变量的，它表示一个引用变量可存活的范围，简单说也就是，如果我压根不存在引用的变量，那我遵循作用域的限制就够用了。但是一旦出现了引用和被引用的关系，单纯作用域的概念不够使用，可能会产生悬垂引用之类的问题，于是 Rust 为了确保所有操作都是内存安全的，制定了生命周期的一套概念。</p>\n<h2 id=\"悬垂指针-Dangling-Pointer\"><a href=\"#悬垂指针-Dangling-Pointer\" class=\"headerlink\" title=\"悬垂指针 Dangling Pointer\"></a>悬垂指针 Dangling Pointer</h2><p>悬垂指针指的是引用了内存已被释放的变量，如下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">r</span>;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">5</span>;</span><br><span class=\"line\">        r = &amp;x; </span><br><span class=\"line\">       <span class=\"comment\">// 🌟 drop(x) 这里在离开代码块前有一步隐藏的自动释放 x</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// r 指向的引用 x 在离开代码块后就会被释放</span></span><br><span class=\"line\">    <span class=\"comment\">// 则以下代码访问 r 即产生了一个悬垂指针（dangling pointer）</span></span><br><span class=\"line\">    <span class=\"comment\">// —— 访问了已被释放内存的变量</span></span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;This is a dangling pointer &amp;r &#123;&#125;&quot;</span>, &amp;r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>悬垂引用的本质是变量的存活时间，也可以说是作用域链长度，通常来说，存活时间更长的变量去引用比它存活时间短的变量就会容易发生这类问题，Rust 编译期间就会检查出每个变量的有效作用范围，来避免这类异常。</p>\n<h2 id=\"函数中的生命周期\"><a href=\"#函数中的生命周期\" class=\"headerlink\" title=\"函数中的生命周期\"></a>函数中的生命周期</h2><p>我们来实现一个函数 longer，接收两个字符串切片，然后返回长度更大的字符串切片：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">longer</span>(a: &amp;<span class=\"type\">str</span>, b: &amp;<span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a.<span class=\"title function_ invoke__\">len</span>() &gt; b.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">        a</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = <span class=\"string\">&quot;Rust&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s3</span> = <span class=\"title function_ invoke__\">longer</span>(s1.<span class=\"title function_ invoke__\">as_str</span>(), s2);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The longer string is &#123;&#125;&quot;</span>, s3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们得到如图的报错提示：</p>\n<p><img src=\"/../images/lifetime/image-20241204203646992.png\" alt=\"image-20241204203646992\"></p>\n<p><strong>Missing lifetime specifier</strong> 缺少生命周期标注，这是为什么？我们上段有讲过，Rust 需要确保所有操作都是内存安全。而如何确保？就会需要足够的信息来分析生命周期，确保只会有短生命周期引用长生命周期的情况。所以，在 Rust 中每个变量都会有它自己的生命周期，代表它能存活多久。</p>\n<p>那么讲回我们上面的 longer 函数，函数参数是两个变量 a 和 b，如果该函数没有返回值的情况下，那么这两个入参引用在函数执行完成后就无法被访问了，这是可以理解的。但我们现在给函数指定了返回一个字符串切片类型的变量，此时 Rust 编译器并不能分析出到底是返回入参 a 还是入参 b 还是别的什么情况，这些都是运行时才能确定的，这就导致了在静态编译期间 Rust 编译器判断不出返回值操作内存是否是安全的，这种状况对 Rust 来说是不允许的。</p>\n<p>于是就需要开发者手动的<strong>显式</strong>标注生命周期，让编译器在编译时至少了解返回的变量对应的是哪个生命周期，以此来通过编译期间的安全检查。</p>\n<p>📢 注意，生命周期标注并不会对<strong>变量的实际生命周期</strong>造成任何影响，仅是告知编译器及通过编译期间检查。</p>\n<h2 id=\"生命周期标注-Lifetime-Specifier\"><a href=\"#生命周期标注-Lifetime-Specifier\" class=\"headerlink\" title=\"生命周期标注 Lifetime Specifier\"></a>生命周期标注 Lifetime Specifier</h2><p>写法：半个单引号 <code>&#39;a</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;<span class=\"type\">i32</span> <span class=\"comment\">// 一个引用</span></span><br><span class=\"line\">&amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">i32</span> <span class=\"comment\">// 具有显式生命周期标注的引用</span></span><br><span class=\"line\">&amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">mut</span> <span class=\"type\">i32</span> <span class=\"comment\">// 具有显式生命周期标注的可变引用</span></span><br></pre></td></tr></table></figure>\n\n<p>我们来修改下 longer 函数，对它加上显式的生命周期标注：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 显式的告诉编译器，a,b,返回值 都属于同一个生命周期</span></span><br><span class=\"line\"><span class=\"comment\">// 因为返回值要么是 a 要么是 b</span></span><br><span class=\"line\"><span class=\"comment\">// 生命周期标注和泛型一样，也需要前置声明 &lt;&#x27;a&gt; 后才能使用</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">longer</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(a: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>, b: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a.<span class=\"title function_ invoke__\">len</span>() &gt; b.<span class=\"title function_ invoke__\">len</span>() &#123;</span><br><span class=\"line\">        a</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = <span class=\"string\">&quot;Rust&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s3</span> = <span class=\"title function_ invoke__\">longer</span>(s1.<span class=\"title function_ invoke__\">as_str</span>(), s2);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;The longer string is &#123;&#125;&quot;</span>, s3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果，如下：</p>\n<p><img src=\"/../images/lifetime/image-20241204203817513.png\" alt=\"image-20241204203817513\"></p>\n<p>那么可能会有疑惑，为什么我们之前的练习中，都没有需要显式生命周期标注的 case 呢？那是因为 Rust 编译器本身有自动推理生命周期的功能，并且如我们上面提到的“每个变量都有其对应的生命周期”，实际上我们定义的函数也会通过编译器被翻译，函数的每个入参都会被自动加上其对应的生命周期参数，而当我们并没有出现无法分析生命周期的情况时，在编译器自动推理能力范围内的 case 就不需要手动加上生命周期标注。</p>\n<p>这是因为，如果函数压根没有返回值，自然就不需要生命周期标注的加持了。如果有返回值，假设函数的返回值是引用类型，那么它也只可能有两种来源：</p>\n<ul>\n<li>函数某个入参的生命周期</li>\n<li>函数内某个新建变量的生命周期</li>\n</ul>\n<p>对于第一种情况，如果只有一个入参，那也就不需要生命周期标注（✨ <strong>生命周期标注通常是出现在拥有多个生命周期的情况下的</strong>）。 而第二种情况，这是明显的悬垂指针，新建变量的生命周期仅在函数内部，函数外是无法对其进行引用的，直接会被编译器拒绝。</p>\n<p>这种<strong>无需手动</strong>进行生命周期标注的能力被称为 “<strong>生命周期消除（Lifetime Elision）</strong>”，是编译器为了简化开发者的使用而自动运用的。具体的，会自动使用生命消除能力需要符合三条具体规则，可以参考一下截图要求：</p>\n<p>（一般情况，只要编译器能通过编译，则证明无需手动进行生命周期标注）</p>\n<p><img src=\"/../images/lifetime/image-20241204233227155.png\" alt=\"image-20241204233227155\"></p>\n<h2 id=\"对-生命周期标注-的总结\"><a href=\"#对-生命周期标注-的总结\" class=\"headerlink\" title=\"对 生命周期标注 的总结\"></a>对 生命周期标注 的总结</h2><p>生命周期标注就是将函数的多个引用参数和返回值的作用域进行关联，一旦关联到一起后，Rust 便可以拥有充分的信息来分析和确保我们的操作是内存安全的。</p>\n<h2 id=\"结构体中的生命周期\"><a href=\"#结构体中的生命周期\" class=\"headerlink\" title=\"结构体中的生命周期\"></a>结构体中的生命周期</h2><p>当结构体中存在引用类型时，也会存在需要显式生命周期标注的 case：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结构体加上生命周期标注</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Example</span>&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>&gt; &#123;</span><br><span class=\"line\">  x: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">  y: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法中的生命周期\"><a href=\"#方法中的生命周期\" class=\"headerlink\" title=\"方法中的生命周期\"></a>方法中的生命周期</h2><p>给 Example 结构体加上方法（methods）：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结构体加上生命周期标注</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Example</span>&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>&gt; &#123;</span><br><span class=\"line\">    x: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">    y: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>&gt; Example&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里我们并不需要标注因为我们的入参上含有 &amp;self 或者 &amp;mut self，</span></span><br><span class=\"line\">    <span class=\"comment\">// 其实就是符合了我们上面指出过的第一种 case，该方法有引用类型的返回值，</span></span><br><span class=\"line\">    <span class=\"comment\">// 无论是什么引用类型，只可能是来源于入参。</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时如果仅一个入参，那么它的返回值生命周期一定是 self 的生命周期，</span></span><br><span class=\"line\">    <span class=\"comment\">// 且无论返回值有多少个，都一定只有一个生命周期。也就不需要手动添加生命周期标注了，</span></span><br><span class=\"line\">    <span class=\"comment\">// self 的生命周期 —— 即当前 Example 结构体实例会被直接赋予给这个方法的返回值。</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">get_self</span>(&amp;<span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> &amp;Example &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动约束生命周期\"><a href=\"#手动约束生命周期\" class=\"headerlink\" title=\"手动约束生命周期\"></a>手动约束生命周期</h3><p>另外还有一种手动约束多个生命周期的语法 —— <code>&#39;a: &#39;b</code> 表示 <code>&#39;a</code> 活的比 <code>&#39;b</code> 时间长，用于当方法引用了多个生命周期的情况下，因为如果返回了一个较大的生命周期会产生悬垂引用，需要手动表明生命周期之间的关系：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// before</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; MyStruct&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 方法返回值为&#x27;b, 且该方法引用了&#x27;a, 那么只有 &#x27;b 存活时间一定比 &#x27;a 短才不会引起悬垂引用。</span></span><br><span class=\"line\">  <span class=\"comment\">// Rust 编译器并不能知道两者关系，需要手动加上生命周期约束。</span></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">foo</span>&lt;<span class=\"symbol\">&#x27;b</span>&gt;(&amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">self</span>, other: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.name</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span>&lt;<span class=\"symbol\">&#x27;a</span>: <span class=\"symbol\">&#x27;b</span>, <span class=\"symbol\">&#x27;a</span>&gt; MyStruct&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">foo</span>&lt;<span class=\"symbol\">&#x27;b</span>&gt;(&amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">self</span>, other: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">self</span>.name</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特殊生命周期标注\"><a href=\"#特殊生命周期标注\" class=\"headerlink\" title=\"特殊生命周期标注\"></a>特殊生命周期标注</h2><h3 id=\"静态生命周期\"><a href=\"#静态生命周期\" class=\"headerlink\" title=\"静态生命周期\"></a>静态生命周期</h3><p><code>&#39;static</code> 标注是指这是一个静态生命周期，拥有静态生命周期的引用就表示可以和整个程序存活的一样久。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s</span>: &amp;<span class=\"symbol\">&#x27;static</span> <span class=\"type\">str</span> = <span class=\"string\">&quot;我没啥优点，就是活得久，嘿嘿&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 Rust 中，字符串字面量默认就是 静态生命周期，即不管字符串字面量定义在哪，它的生命周期默认都是整个程序存活期间。这里我们可以结合一个复杂点的例子来对比看下字符串字面量的生命周期和普通生命周期的差异。</p>\n<p>有如下两个函数，分别都返回第二个入参，对应也都加上了生命周期标注：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">example</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(a: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>, b: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">str</span> &#123;</span><br><span class=\"line\">    b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">example2</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt;(a: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">i32</span>, b: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">i32</span>) <span class=\"punctuation\">-&gt;</span> &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">i32</span> &#123;</span><br><span class=\"line\">    b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们写两个一样的 case，一个用字符串字面量测试 对应 <code>example</code>，一个用 <code>i32</code> 类型测试 对应 <code>example2</code>：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"string\">&quot;Hello&quot;</span>; <span class=\"comment\">// &#x27;static</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = <span class=\"string\">&quot;Rust&quot;</span>; <span class=\"comment\">// &#x27;static</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">example</span>(s1, s2);</span><br><span class=\"line\">  result</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result 持有对 s2 的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试能否访问</span></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;result is &#123;&#125;&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">n1</span> = <span class=\"number\">3</span>;  <span class=\"comment\">// i32</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">result</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">n2</span> = <span class=\"number\">9</span>;  <span class=\"comment\">// i32</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">example2</span>(&amp;n1, &amp;n2);</span><br><span class=\"line\">  result</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// result 持有对 n2 的引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尝试能否访问</span></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;result is &#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure>\n\n<p>编辑器有如下报错：</p>\n<p><img src=\"/../images/lifetime/image-20241205021400512.png\" alt=\"image-20241205021400512\"></p>\n<p><strong><code>n2</code> does not live long enough</strong> 可以看到 case2 外面的 <code>result</code> 持有了对 <code>n2</code> 的引用，那么就意味着 <code>n2</code> 的生命周期应该长于外部的 <code>result</code>，但 <code>n2</code> 是代码块内部定义的变量，它的存活范围仅在代码块内部，则无法通过编译检查。</p>\n<p>而同一个状况，因为 case1 中用到的是字符串字面量，字符串字面量本身的生命周期就是整个程序期间，这才通过了编译器的检查。</p>\n<h3 id=\"占位符默认匹配生命周期\"><a href=\"#占位符默认匹配生命周期\" class=\"headerlink\" title=\"占位符默认匹配生命周期\"></a>占位符默认匹配生命周期</h3><p>当我们在实现方法时，如果并没有涉及多生命周期的情况，或者说都满足生命消除规则的条件下，其实就表示我们并不是很关心这个生命周期，这时候我们 <code>impl</code>  声明可以使用 <code>_</code> 占位符来表示默认匹配的那个生命周期，不需要给定一个具体的生命周期标注名了，因为在内层方法的实现上我们也不需要用到手动标注。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Counter</span>&lt;<span class=\"symbol\">&#x27;a</span>&gt; &#123;</span><br><span class=\"line\">    count: &amp;<span class=\"symbol\">&#x27;a</span> <span class=\"keyword\">mut</span> <span class=\"type\">i32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 占位符匹配默认的生命周期</span></span><br><span class=\"line\"><span class=\"comment\">// 该 Counter 结构体实例就一个生命周期</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Counter</span>&lt;<span class=\"symbol\">&#x27;_</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) &#123;</span><br><span class=\"line\">        *<span class=\"keyword\">self</span>.count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>巩固上面的理解，请修复下面的函数声明：</p>\n<p><img src=\"/../images/lifetime/image-20241205022146026.png\" alt=\"image-20241205022146026\"></p>\n<p>改动代码如下：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">test_lifetime_mut</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">insert_value</span>&lt;<span class=\"symbol\">&#x27;a</span>, <span class=\"symbol\">&#x27;b</span>: <span class=\"symbol\">&#x27;a</span>&gt;(my_vec: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">Vec</span>&lt;&amp;<span class=\"symbol\">&#x27;a</span> <span class=\"type\">i32</span>&gt;, value: &amp;<span class=\"symbol\">&#x27;b</span> <span class=\"type\">i32</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ✅ 结论：my_vec 拥有对 value 的引用 =&gt; &#x27;b: &#x27;a 为函数添加生命周期约束通过编译器检查</span></span><br><span class=\"line\">    my_vec.<span class=\"title function_ invoke__\">push</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ✅ 根据上述结论，y 必须早于 x 定义</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">my_vec</span> = <span class=\"built_in\">vec!</span>[&amp;x];</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">insert_value</span>(&amp;<span class=\"keyword\">mut</span> my_vec, &amp;y);</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;my_vec:?&#125;&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功运行！</p>\n<p><img src=\"/../images/lifetime/image-20241205113302099.png\" alt=\"image-20241205113302099\"></p>\n","text":"作用生命周期即指一个变量的有效作用范围，它和 Scope 的概念听起来会有点类似。Scope（作用域）规定了变量能被访问的范围，超出了定义作用域的地方是不能访问...","permalink":"/post/lifetime","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":12,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">作用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%82%AC%E5%9E%82%E6%8C%87%E9%92%88-Dangling-Pointer\"><span class=\"toc-text\">悬垂指针 Dangling Pointer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">函数中的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A0%87%E6%B3%A8-Lifetime-Specifier\"><span class=\"toc-text\">生命周期标注 Lifetime Specifier</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A0%87%E6%B3%A8-%E7%9A%84%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">对 生命周期标注 的总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">结构体中的生命周期</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">方法中的生命周期</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E7%BA%A6%E6%9D%9F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">手动约束生命周期</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%AE%8A%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A0%87%E6%B3%A8\"><span class=\"toc-text\">特殊生命周期标注</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">静态生命周期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%A0%E4%BD%8D%E7%AC%A6%E9%BB%98%E8%AE%A4%E5%8C%B9%E9%85%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">占位符默认匹配生命周期</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"智能指针2 Smart Pointers 2","uid":"9fb78f735ce3a3f25bf1795a347b0649","slug":"smart-pointers-2","date":"2024-12-05T03:36:40.000Z","updated":"2025-01-13T14:30:04.334Z","comments":true,"path":"api/articles/smart-pointers-2.json","keywords":"","cover":[],"text":"Rc 智能指针Rust 所有权机制要求一个值只能有一个所有者，如果出现需要共享数据的情况，也就是说一个数据资源拥有多个所有者，或者说一个资源需要被多个对象引用，...","permalink":"/post/smart-pointers-2","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":12,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"泛型 Generics","uid":"ab26d33d9183b3dac0ad2f16b85bf6b4","slug":"generics","date":"2024-12-02T13:12:41.000Z","updated":"2025-01-13T14:29:48.774Z","comments":true,"path":"api/articles/generics.json","keywords":"","cover":[],"text":"函数中使用泛型泛型是实现让一个功能函数支持不同类型的手段，我们称之为多态。在不支持泛型时，我们可能会写出如下代码： 1234567891011fn add_i3...","permalink":"/post/generics","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":12,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}