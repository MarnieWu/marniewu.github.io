{"title":"迭代器 Iterators","uid":"dffe4aa96c5d22cd6989d498cd57fa66","slug":"iterators","date":"2025-01-21T10:15:44.000Z","updated":"2025-01-26T15:38:43.838Z","comments":true,"path":"api/articles/iterators.json","keywords":"","cover":[],"content":"<h2 id=\"What-are-iterators\"><a href=\"#What-are-iterators\" class=\"headerlink\" title=\"What are iterators?\"></a>What are iterators?</h2><p>迭代器是 Rust 中用来处理集合的方式，允许遍历和操作序列值。</p>\n<h2 id=\"Iterator-Trait\"><a href=\"#Iterator-Trait\" class=\"headerlink\" title=\"Iterator Trait\"></a>Iterator Trait</h2><p>Iterator Trait 会提供 <code>next()</code> 方法，用于返回用 Option 包裹的序列的下一个 item，直到没有元素可以返回了，即返回 <code>None</code>。Trait 内部设置了关联类型，实现时声明具体类型。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">type</span> <span class=\"title class_\">Item</span>;</span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">next</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;<span class=\"keyword\">Self</span>::Item&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Laziness-惰性的\"><a href=\"#Laziness-惰性的\" class=\"headerlink\" title=\"Laziness 惰性的\"></a>Laziness 惰性的</h2><p>迭代器分为创建和消费两部分</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">numbers</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这既是创建了一个迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">nums_iter</span> = numbers.<span class=\"title function_ invoke__\">iter</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>迭代器是懒惰的，在没有<strong>消费</strong>迭代器之前，不会产生任何的消耗，即创建语句<strong>并不会真实被执行</strong>。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面是创建了一个迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">nums_iter</span> = numbers.<span class=\"title function_ invoke__\">iter</span>();</span><br><span class=\"line\"><span class=\"comment\">// 下面是消费了一个迭代器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">nums</span>: <span class=\"type\">Vec</span>&lt;_&gt; = nums_iter.<span class=\"title function_ invoke__\">collect</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Types-of-Iterators\"><a href=\"#Types-of-Iterators\" class=\"headerlink\" title=\"Types of Iterators\"></a>Types of Iterators</h2><p>迭代器分为三种类型：</p>\n<ul>\n<li>迭代器本身：实现了 Iterator Trait 的迭代器都被称为普通迭代器，它们能使用 <code>next()</code> 方法对序列遍历直到返回 <code>None</code> 。</li>\n<li>迭代器适配器：会创建并返回一个新的迭代器的方法，被称为迭代器适配器。如 map、filter、take 等。</li>\n<li>消耗适配器：将一个迭代器转换成集合并返回的方法，被称为消耗适配器。如 collect、sum、fold 等。</li>\n</ul>\n<h2 id=\"Associated-Methods\"><a href=\"#Associated-Methods\" class=\"headerlink\" title=\"Associated Methods\"></a>Associated Methods</h2><p>常用的创建迭代器的三种方法</p>\n<h3 id=\"iter-：创建一个借用集合中每个元素的迭代器，原集合可以继续使用\"><a href=\"#iter-：创建一个借用集合中每个元素的迭代器，原集合可以继续使用\" class=\"headerlink\" title=\"iter()：创建一个借用集合中每个元素的迭代器，原集合可以继续使用\"></a><code>iter()</code>：创建一个借用集合中每个元素的迭代器，原集合可以继续使用</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">item</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">iter</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"into-inter-：创建会转移集合中每个元素所有权的迭代器，原集合不能再继续使用\"><a href=\"#into-inter-：创建会转移集合中每个元素所有权的迭代器，原集合不能再继续使用\" class=\"headerlink\" title=\"into_inter()：创建会转移集合中每个元素所有权的迭代器，原集合不能再继续使用\"></a><code>into_inter()</code>：创建会转移集合中每个元素所有权的迭代器，原集合不能再继续使用</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">item</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">into_iter</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"iter-mut-：创建一个可变借用每个元素的，迭代过程中每个元素都支持修改，原集合可以继续使用\"><a href=\"#iter-mut-：创建一个可变借用每个元素的，迭代过程中每个元素都支持修改，原集合可以继续使用\" class=\"headerlink\" title=\"iter_mut()：创建一个可变借用每个元素的，迭代过程中每个元素都支持修改，原集合可以继续使用\"></a><code>iter_mut()</code>：创建一个可变借用每个元素的，迭代过程中每个元素都支持修改，原集合可以继续使用</h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">item</span> <span class=\"keyword\">in</span> vec.<span class=\"title function_ invoke__\">iter_mut</span>() &#123;</span><br><span class=\"line\">    *item += <span class=\"number\">1</span>; <span class=\"comment\">// Increment each element</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"while-loop\"><a href=\"#while-loop\" class=\"headerlink\" title=\"while loop\"></a><code>while loop</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">my_vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">my_iter</span> = my_vec.<span class=\"title function_ invoke__\">iter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// while loop</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">let</span> <span class=\"variable\">Some</span>(next) = my_iter.<span class=\"title function_ invoke__\">next</span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, next);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当使用  <code>while loop</code> 时，因为每次都是外部调用的 <code>.next()</code> 控制迭代器的遍历，所以需要将 iterator 声明成可变的，才能操作内部状态。</p>\n<h3 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for...in\"></a><code>for...in</code></h3><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">my_vec</span> = <span class=\"built_in\">vec!</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">my_iter</span> = my_vec.<span class=\"title function_ invoke__\">iter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// for loop</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">v</span> <span class=\"keyword\">in</span> my_iter &#123;</span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>for...in</code>  遍历迭代器是由循环内部控制的迭代器状态，所以无需外部的可变声明。</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><img src=\"/../images/iterators/image-20250125160633731.png\" alt=\"image-20250125160633731\"></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">fib</span> = Fibonacci::<span class=\"title function_ invoke__\">new</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">first_ten</span>: <span class=\"type\">Vec</span>&lt;<span class=\"type\">u32</span>&gt; = fib.<span class=\"title function_ invoke__\">take</span>(<span class=\"number\">10</span>).<span class=\"title function_ invoke__\">collect</span>();</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;First 10 Fibonacci numbers: &#123;:?&#125;&quot;</span>, first_ten);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[derive(Debug)]</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Fibonacci</span> &#123;</span><br><span class=\"line\">    prev: <span class=\"type\">u32</span>,</span><br><span class=\"line\">    curr: <span class=\"type\">u32</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现一个结构体 Fibonacci，并为它实现 Iterator trait。</span></span><br><span class=\"line\"><span class=\"comment\"> * 在 next 方法中生成下一个斐波那契数。</span></span><br><span class=\"line\"><span class=\"comment\"> * 编写一个测试函数，输出前 10 个斐波那契数。</span></span><br><span class=\"line\"><span class=\"comment\"> * take 方法是一个迭代适配器，用于限制生成的数量。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Fibonacci</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">new</span>() <span class=\"punctuation\">-&gt;</span> Fibonacci &#123;</span><br><span class=\"line\">        Fibonacci &#123; curr: <span class=\"number\">0</span>, prev: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">impl</span> <span class=\"title class_\">Iterator</span> <span class=\"keyword\">for</span> <span class=\"title class_\">Fibonacci</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> <span class=\"title class_\">Item</span> = <span class=\"type\">u32</span>;</span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">next</span>(&amp;<span class=\"keyword\">mut</span> <span class=\"keyword\">self</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Option</span>&lt;<span class=\"keyword\">Self</span>::Item&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.prev == <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">self</span>.curr == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// first one number</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.curr = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">self</span>.prev == <span class=\"number\">0</span> &amp;&amp; <span class=\"keyword\">self</span>.curr == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// first two number</span></span><br><span class=\"line\">            <span class=\"keyword\">self</span>.prev = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// normally</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> <span class=\"variable\">prev</span> = <span class=\"keyword\">self</span>.prev;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.prev = <span class=\"keyword\">self</span>.curr;</span><br><span class=\"line\">            <span class=\"keyword\">self</span>.curr += prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Some</span>(<span class=\"keyword\">self</span>.curr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","text":"What are iterators?迭代器是 Rust 中用来处理集合的方式，允许遍历和操作序列值。 Iterator TraitIterator Trait...","permalink":"/post/iterators","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":11,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#What-are-iterators\"><span class=\"toc-text\">What are iterators?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Iterator-Trait\"><span class=\"toc-text\">Iterator Trait</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Laziness-%E6%83%B0%E6%80%A7%E7%9A%84\"><span class=\"toc-text\">Laziness 惰性的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Types-of-Iterators\"><span class=\"toc-text\">Types of Iterators</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Associated-Methods\"><span class=\"toc-text\">Associated Methods</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iter-%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%80%9F%E7%94%A8%E9%9B%86%E5%90%88%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E5%8E%9F%E9%9B%86%E5%90%88%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">iter()：创建一个借用集合中每个元素的迭代器，原集合可以继续使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#into-inter-%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%BC%9A%E8%BD%AC%E7%A7%BB%E9%9B%86%E5%90%88%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E6%89%80%E6%9C%89%E6%9D%83%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E5%8E%9F%E9%9B%86%E5%90%88%E4%B8%8D%E8%83%BD%E5%86%8D%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">into_inter()：创建会转移集合中每个元素所有权的迭代器，原集合不能再继续使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#iter-mut-%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E5%8F%98%E5%80%9F%E7%94%A8%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%EF%BC%8C%E8%BF%AD%E4%BB%A3%E8%BF%87%E7%A8%8B%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E9%83%BD%E6%94%AF%E6%8C%81%E4%BF%AE%E6%94%B9%EF%BC%8C%E5%8E%9F%E9%9B%86%E5%90%88%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">iter_mut()：创建一个可变借用每个元素的，迭代过程中每个元素都支持修改，原集合可以继续使用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Examples\"><span class=\"toc-text\">Examples</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while-loop\"><span class=\"toc-text\">while loop</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for-in\"><span class=\"toc-text\">for...in</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"项目和包 Packages and Crates","uid":"eb08d875d225f31121fe8b5a6e855210","slug":"packages_and_crates","date":"2025-01-20T06:25:41.000Z","updated":"2025-01-21T10:16:59.212Z","comments":true,"path":"api/articles/packages_and_crates.json","keywords":"","cover":null,"text":"TODO …","permalink":"/post/packages_and_crates","photos":[],"count_time":{"symbolsCount":6,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":11,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}