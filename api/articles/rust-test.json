{"title":"Rust Test","uid":"acc0e87b34830b962966d84f538705e6","slug":"rust-test","date":"2025-01-27T02:12:05.000Z","updated":"2025-01-27T10:59:10.090Z","comments":true,"path":"api/articles/rust-test.json","keywords":"","cover":[],"content":"<h2 id=\"Unit-Test\"><a href=\"#Unit-Test\" class=\"headerlink\" title=\"Unit Test\"></a>Unit Test</h2><p>单元测试</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(left: <span class=\"type\">u64</span>, right: <span class=\"type\">u64</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u64</span> &#123;</span><br><span class=\"line\">    left + right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[cfg(test)]</span></span><br><span class=\"line\"><span class=\"keyword\">mod</span> tests &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 导入当前包所有的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">use</span> super::*;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span> <span class=\"comment\">// 属性宏：表示这是一个单元测试</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">it_works</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(result, <span class=\"number\">4</span>, <span class=\"string\">&quot;result is &#123;&#125;&quot;</span>, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">feature_sum2</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = <span class=\"title function_ invoke__\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert_eq!</span>(result, <span class=\"number\">4</span>, <span class=\"string\">&quot;✨✨✨ result is &#123;&#125;&quot;</span>, result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">feature</span>() <span class=\"punctuation\">-&gt;</span> <span class=\"type\">Result</span>&lt;(), ()&gt; &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">Err</span>(())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"comment\">// 📌 显式的标记下面的单测是会发生panic的，panic不会影响单测通过</span></span><br><span class=\"line\">    <span class=\"comment\">// expected设置期待的panic message，若不匹配则单测失败</span></span><br><span class=\"line\">    <span class=\"meta\">#[should_panic(expected = <span class=\"string\">&quot;error2&quot;</span>)]</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">test_todo</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic!</span>(<span class=\"string\">&quot;error2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#[test]</span></span><br><span class=\"line\">    <span class=\"meta\">#[ignore]</span> <span class=\"comment\">// 显式的忽略某个单元测试</span></span><br><span class=\"line\">    <span class=\"keyword\">fn</span> <span class=\"title function_\">test_3</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">unimplemented!</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Integration-Test\"><a href=\"#Integration-Test\" class=\"headerlink\" title=\"Integration Test\"></a>Integration Test</h2><p>集成测试</p>\n<p>在与 src 目录同级下创建 tests 目录，存放集成测试（integration test）的文件。test 目录下的每一个文件都会被编译成一个单独的 crate，crate 名就是文件名。运行命令 <code>cargo test</code> 会执行当前 package 下所有的单元测试和集成测试。</p>\n<h2 id=\"cargo-test\"><a href=\"#cargo-test\" class=\"headerlink\" title=\"cargo test\"></a><code>cargo test</code></h2><p><code>cargo test --test [TEST_CRATE_NAME]</code> 用于执行单个集成测试文件。</p>\n<p><code>cargo test [TESTNAME]</code> 用于执行某个单元测试（提供函数名）。</p>\n<p><code>cargo test -- --ignored</code> 用于执行所有标记 <code>ignore</code> 的单元测试。</p>\n<p><code>cargo test --doc</code> 用于执行所有文档测试。</p>\n<p><code>cargo test --examples [TESTNAME]</code> 用于执行所有&#x2F;指定 Examples 测试。</p>\n<p>在集成测试目录下，如果需要抽公共模块，需要单独再建一个目录如 common，在新建目录下创建文件。</p>\n<h2 id=\"Doc-Tests\"><a href=\"#Doc-Tests\" class=\"headerlink\" title=\"Doc Tests\"></a>Doc Tests</h2><p>文档测试</p>\n<p><code>///</code> 为函数标注文档测试的注释。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// Add to number</span></span><br><span class=\"line\"><span class=\"comment\">/// # Examples</span></span><br><span class=\"line\"><span class=\"comment\">/// ```rust</span></span><br><span class=\"line\"><span class=\"comment\">/// assert_eq!(rust_lib::add(1,1),2)</span></span><br><span class=\"line\"><span class=\"comment\">/// ```</span></span><br><span class=\"line\"><span class=\"comment\">/// # Panic</span></span><br><span class=\"line\"><span class=\"comment\">/// # Errors</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">add</span>(left: <span class=\"type\">u64</span>, right: <span class=\"type\">u64</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u64</span> &#123;</span><br><span class=\"line\">    left + right</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rust_lib 为当前 cargo 配置文件下的 package name，需要把 “-” 转换成 “_”</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>//!</code> 为模块标注文档测试的注释，模块注释只能写在文件头部。<strong>通常是用来写模块说明的</strong></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//! #utils</span></span><br><span class=\"line\"><span class=\"comment\">//! A module helper you</span></span><br><span class=\"line\"><span class=\"comment\">//! ```rust</span></span><br><span class=\"line\"><span class=\"comment\">//! assert_eq!(rust_lib::utils::sum(1,1),2)</span></span><br><span class=\"line\"><span class=\"comment\">//! ```</span></span><br><span class=\"line\"><span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> utils &#123;</span><br><span class=\"line\">    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"title function_\">sum</span>(a: <span class=\"type\">u8</span>, b: <span class=\"type\">u8</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">u8</span> &#123;</span><br><span class=\"line\">        a + b</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Benches-unstable-TODO\"><a href=\"#Benches-unstable-TODO\" class=\"headerlink\" title=\"Benches [unstable __ TODO]\"></a>Benches [unstable __ TODO]</h2><p>基准测试（性能测试）**unstable **状态</p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>当我们需要为当前 rust 代码提供一些 demo 时，可以与 <code>src</code> 同级创建 <code>examples</code> 目录，下面可以放多个 demo 文件，每个文件里可以提供一些自己的单元测试代码。</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// examples/a.rs</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> rust_lib::add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">sum</span> = <span class=\"title function_ invoke__\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert_eq!</span>(sum, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[test]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">feature_a</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#[test]</span></span><br><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">feature_b</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>cargo test --examples a</code> 用于执行 a 文件下的所有单元测试。</p>\n<p><code>cargo test --examples feature_a</code> 用于执行 <code>examples</code> 目录下最后一个名为 <code>feature_a</code> 的单元测试。</p>\n<h2 id=\"cfg-test\"><a href=\"#cfg-test\" class=\"headerlink\" title=\"#[cfg(test)]\"></a><code>#[cfg(test)]</code></h2><p>属性宏，用于告诉编译器这部分代码是测试代码，测试代码是只有运行 <code>cargo test</code> 才会被执行的代码，<code>cargo build</code> 时不会执行。</p>\n<h2 id=\"Engineering-Spec-工程规范\"><a href=\"#Engineering-Spec-工程规范\" class=\"headerlink\" title=\"Engineering Spec 工程规范\"></a>Engineering Spec 工程规范</h2><p><img src=\"/../images/rust-test/image-20250127154910967.png\" alt=\"image-20250127154910967\"></p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p><img src=\"/../images/rust-test/image-20250127155136842.png\" alt=\"image-20250127155136842\"></p>\n<h3 id=\"配置-github\"><a href=\"#配置-github\" class=\"headerlink\" title=\"配置 github\"></a>配置 github</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Github Actions 参考:  <a href=\"https://docs.github.com/en/actions/writing-workflows/using-workflow-templates\">https://docs.github.com/en/actions/writing-workflows/using-workflow-templates</a></p></blockquote>\n<p>在 github 上新建一个仓库，将本地仓库与之关联，点击 Actions 选择一个模板，按照 publish crate 步骤对模板进行修改。</p>\n<h3 id=\"Puiblishing-on-crates-io\"><a href=\"#Puiblishing-on-crates-io\" class=\"headerlink\" title=\"Puiblishing on crates.io\"></a>Puiblishing on crates.io</h3><p><strong>Before your first publish: Need Login!!</strong></p>\n<p>需要登录才能够发布到官方市场。我们这里用 Github Actions 自动发布的话，就需要去 crates.io 上拿一个 token（登录凭证）存到 github 仓库的 settings 中，然后在 ci 脚本里可以使用。</p>\n<p>crates.io 首次用 github 登录后，会自动往对应邮箱发送验证邮件，只有通过邮箱校验才能用脚本进行发布。验证完成后 <a href=\"https://crates.io/settings/tokens\">https://crates.io/settings/tokens</a> 在这个页面生成 token。</p>\n<p><img src=\"/../images/rust-test/image-20250127181457703.png\" alt=\"image-20250127181457703\"></p>\n<p>将生成的 token 复制，再到 Github 仓库下 &gt; Settings &gt; Secrets and variables &gt; Actions 选择 New repository secret，将 token 存入。</p>\n<p><img src=\"/../images/rust-test/image-20250127181823573.png\" alt=\"image-20250127181823573\"></p>\n<p><img src=\"/../images/rust-test/image-20250127181928716.png\" alt=\"image-20250127181928716\"></p>\n<p>这里填写的 secrets name 就是之后在 ci 文件里会用到的变量名。</p>\n<h3 id=\"Publish-a-crate\"><a href=\"#Publish-a-crate\" class=\"headerlink\" title=\"Publish a crate\"></a>Publish a crate</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>文档参考：<a href=\"https://doc.rust-lang.org/cargo/reference/publishing.html#packaging-a-crate\">https://doc.rust-lang.org/cargo/reference/publishing.html#packaging-a-crate</a></p></blockquote>\n<p><strong>Keep in mind:</strong> </p>\n<p>crate 名在市场上不能重复，已经存在的包名发布会失败。包名指的是 <code>Cargo.toml</code> 配置文件中设置的 package name。</p>\n<p><strong>Make sure you have filled the following fields:</strong></p>\n<p><img src=\"/../images/rust-test/image-20250127171346131.png\" alt=\"image-20250127171346131\"></p>\n<p>补充相关字段，创建 <code>README.md</code></p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Cargo.toml</span></span><br><span class=\"line\">[package]</span><br><span class=\"line\">name = <span class=\"string\">&quot;publish-crate-with-github-actions-demo&quot;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\">edition = <span class=\"string\">&quot;2021&quot;</span></span><br><span class=\"line\">license = <span class=\"string\">&quot;MIT&quot;</span></span><br><span class=\"line\">description = <span class=\"string\">&quot;This package is used for test publish a crate with github actions&quot;</span></span><br><span class=\"line\">homepage = <span class=\"string\">&quot;https://marniewu.github.io/post/rust-test&quot;</span></span><br><span class=\"line\">repository = <span class=\"string\">&quot;https://github.com/MarnieWu/publish-crate-demo&quot;</span></span><br><span class=\"line\">readme = <span class=\"string\">&quot;README.md&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">[dependencies]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// README.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Publish a crate with Github Actions</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Packaging-a-crate\"><a href=\"#Packaging-a-crate\" class=\"headerlink\" title=\"Packaging a crate\"></a>Packaging a crate</h3><p>打包</p>\n<p><code>cargo publish</code> 包含以下步骤：</p>\n<ol>\n<li>对你的 package 进行一些校验检查。</li>\n<li>压缩你的源代码为一个 <code>.crate</code> 文件。</li>\n<li>提取 <code>.crate</code> 文件到一个二进制目录下并验证它是否可以编译。</li>\n<li>上传 <code>.crate</code> 文件至 <code>crate.io</code>。</li>\n<li>在添加之前，注册表会对上传的包做一些额外的检查。</li>\n</ol>\n<p>注册表：指的是平台提供的一个可被下载的包的清单 list，它维护了所有平台上可用的包以及它们的版本、依赖和描述等等信息。</p>\n<p>运行 <code>cargo publish --dry-run</code>  在发布前检查是否存在 warnings 和 errors，如果有配置 Cargo 镜像的需要注释掉用官方的源才能发布。</p>\n<p><img src=\"/../images/rust-test/image-20250127180210243.png\" alt=\"image-20250127180210243\"></p>\n<p>按提示应该是文件未提交，我们先提交下并同步到 github。再次运行，通过检查 ✅。</p>\n<p>下面我们把命令行配置到 ci 文件中，让它通过 Github Actions 的 CI 结合，进行自动发布。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a basic workflow to help you get started with Actions</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">PUBLISHING</span> <span class=\"string\">ON</span> <span class=\"string\">crates.io</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Controls when the workflow will run</span></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\"># Triggers the workflow on push or pull request events but only for the &quot;main&quot; branch</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">&quot;main&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">&quot;main&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"comment\"># This workflow contains a single job called &quot;publish&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">publish:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">Publish</span></span><br><span class=\"line\">    <span class=\"comment\"># The type of runner that the job will run on</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">env:</span></span><br><span class=\"line\">      <span class=\"comment\"># ✨ 这里是我们前面在仓库设置的 token</span></span><br><span class=\"line\">      <span class=\"attr\">CRATES_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.CRATES_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">RUST_CHANNEL:</span> <span class=\"string\">&quot;stable&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v4</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Install Rust toolchain</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Rust</span> <span class=\"string\">toolchain</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          rustup update --no-self-update $&#123;&#123; env.RUST_CHANNEL &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">          rustup component add --toolchain $&#123;&#123; env.RUST_CHANNEL &#125;&#125; rustfmt rust-src</span></span><br><span class=\"line\"><span class=\"string\">          rustup default $&#123;&#123; env.RUST_CHANNEL &#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\">      <span class=\"comment\"># Before publishing check warnings and errors</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publishing</span> <span class=\"string\">check</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">cargo</span> <span class=\"string\">publish</span> <span class=\"string\">--dry-run</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Publish to crates.io</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">to</span> <span class=\"string\">crates.io</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">cargo</span> <span class=\"string\">publish</span> <span class=\"string\">--token</span> <span class=\"string\">$&#123;CRATES_TOKEN&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/rust-test/image-20250127184645648.png\" alt=\"image-20250127184645648\"></p>\n<p>这就是没有校验邮箱会报的错误，验证后手动 re-run ci。</p>\n<p><img src=\"/../images/rust-test/image-20250127185547066.png\" alt=\"image-20250127185547066\"></p>\n<p>ci 成功，我们去 crates.io 上查找一下有没有对应的包，搜索 package_name 包名。</p>\n<p><img src=\"/../images/rust-test/image-20250127185729124.png\" alt=\"image-20250127185729124\"></p>\n<p><img src=\"/../images/rust-test/image-20250127185713012.png\" alt=\"image-20250127185713012\"></p>\n<p>成功搜到，完成 ✅</p>\n<p>（TODO：后续还可以按需加上 version bumping, git tagging 等功能）</p>\n","text":"Unit Test单元测试 123456789101112131415161718192021222324252627282930313233343536373...","permalink":"/post/rust-test","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Unit-Test\"><span class=\"toc-text\">Unit Test</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Integration-Test\"><span class=\"toc-text\">Integration Test</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cargo-test\"><span class=\"toc-text\">cargo test</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Doc-Tests\"><span class=\"toc-text\">Doc Tests</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Benches-unstable-TODO\"><span class=\"toc-text\">Benches [unstable __ TODO]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Examples\"><span class=\"toc-text\">Examples</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cfg-test\"><span class=\"toc-text\">#[cfg(test)]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Engineering-Spec-%E5%B7%A5%E7%A8%8B%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">Engineering Spec 工程规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-github\"><span class=\"toc-text\">配置 github</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Puiblishing-on-crates-io\"><span class=\"toc-text\">Puiblishing on crates.io</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Publish-a-crate\"><span class=\"toc-text\">Publish a crate</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Packaging-a-crate\"><span class=\"toc-text\">Packaging a crate</span></a></li></ol></li></ol>","author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"并发 Concurrency","uid":"d644caf05d644047d4c92cde0f070d6e","slug":"concurrency","date":"2025-01-28T13:38:22.000Z","updated":"2025-02-13T21:07:16.352Z","comments":true,"path":"api/articles/concurrency.json","keywords":"","cover":[],"text":"Concurrency in Rust在 Rust 中，并发（Concurrency）是一项核心功能，旨在安全高效的同时执行多个任务。 Spawning Thr...","permalink":"/post/concurrency","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"17 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"迭代器 Iterators","uid":"dffe4aa96c5d22cd6989d498cd57fa66","slug":"iterators","date":"2025-01-21T10:15:44.000Z","updated":"2025-01-26T15:38:43.838Z","comments":true,"path":"api/articles/iterators.json","keywords":"","cover":[],"text":"What are iterators?迭代器是 Rust 中用来处理集合的方式，允许遍历和操作序列值。 Iterator TraitIterator Trait...","permalink":"/post/iterators","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"rust","slug":"rust","count":13,"path":"api/tags/rust.json"}],"author":{"name":"Marnie","slug":"blog-author","avatar":"/images/favicon.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}